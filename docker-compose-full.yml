version: '3.8'

services:
  # ============================================
  # DATABASE LAYER - One per microservice
  # ============================================
  
  postgres-auth:
    image: postgres:15-alpine
    container_name: postgres-auth
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_pass_2024
    ports:
      - "5432:5432"
    volumes:
      - auth_data:/var/lib/postgresql/data
      - ./db-init/auth:/docker-entrypoint-initdb.d
    networks:
      - agent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-agent:
    image: postgres:15-alpine
    container_name: postgres-agent
    environment:
      POSTGRES_DB: agent_db
      POSTGRES_USER: agent_user
      POSTGRES_PASSWORD: agent_pass_2024
    ports:
      - "5433:5432"
    volumes:
      - agent_data:/var/lib/postgresql/data
      - ./db-init/agent:/docker-entrypoint-initdb.d
    networks:
      - agent-network

  postgres-workflow:
    image: postgres:15-alpine
    container_name: postgres-workflow
    environment:
      POSTGRES_DB: workflow_db
      POSTGRES_USER: workflow_user
      POSTGRES_PASSWORD: workflow_pass_2024
    ports:
      - "5434:5432"
    volumes:
      - workflow_data:/var/lib/postgresql/data
      - ./db-init/workflow:/docker-entrypoint-initdb.d
    networks:
      - agent-network

  postgres-integration:
    image: postgres:15-alpine
    container_name: postgres-integration
    environment:
      POSTGRES_DB: integration_db
      POSTGRES_USER: integration_user
      POSTGRES_PASSWORD: integration_pass_2024
    ports:
      - "5435:5432"
    volumes:
      - integration_data:/var/lib/postgresql/data
      - ./db-init/integration:/docker-entrypoint-initdb.d
    networks:
      - agent-network

  postgres-aimodel:
    image: postgres:15-alpine
    container_name: postgres-aimodel
    environment:
      POSTGRES_DB: aimodel_db
      POSTGRES_USER: aimodel_user
      POSTGRES_PASSWORD: aimodel_pass_2024
    ports:
      - "5436:5432"
    volumes:
      - aimodel_data:/var/lib/postgresql/data
      - ./db-init/aimodel:/docker-entrypoint-initdb.d
    networks:
      - agent-network

  # ============================================
  # CACHING LAYER
  # ============================================
  
  redis-master:
    image: redis:7-alpine
    container_name: redis-master
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --requirepass redis_pass_2024
    volumes:
      - redis_master_data:/data
    networks:
      - agent-network

  redis-replica:
    image: redis:7-alpine
    container_name: redis-replica
    command: >
      redis-server 
      --replicaof redis-master 6379
      --masterauth redis_pass_2024
      --requirepass redis_pass_2024
    depends_on:
      - redis-master
    networks:
      - agent-network

  # ============================================
  # MESSAGE QUEUE LAYER
  # ============================================
  
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: agent_vhost
    ports:
      - "5672:5672"    # AMQP
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - agent-network

  # Kafka for high-throughput scenarios
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    networks:
      - agent-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - agent-network

  # ============================================
  # OBSERVABILITY LAYER
  # ============================================

  # Elasticsearch for centralized logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    networks:
      - agent-network

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=changeme
    ports:
      - "5601:5601"
    networks:
      - agent-network

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: logstash
    depends_on:
      - elasticsearch
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      - "LS_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline
    networks:
      - agent-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # Jaeger UI
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    depends_on:
      - elasticsearch
    networks:
      - agent-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    networks:
      - agent-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - prometheus
      - influxdb
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,redis-app
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - agent-network

  # InfluxDB for time-series metrics
  influxdb:
    image: influxdb:2.7-alpine
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=performance_metrics
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=supersecret123
      - INFLUXDB_HTTP_AUTH_ENABLED=true
      - INFLUXDB_INIT_MODE=setup
      - INFLUXDB_INIT_USERNAME=admin
      - INFLUXDB_INIT_PASSWORD=supersecret123
      - INFLUXDB_INIT_ORG=agent-system
      - INFLUXDB_INIT_BUCKET=performance_metrics
      - INFLUXDB_INIT_RETENTION=30d
      - INFLUXDB_INIT_ADMIN_TOKEN=my-super-secret-auth-token
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    networks:
      - agent-network

  # ============================================
  # MANAGEMENT TOOLS
  # ============================================

  # pgAdmin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@agentlightning.ai
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./config/pgadmin/servers.json:/pgadmin4/servers.json
    networks:
      - agent-network

  # RedisInsight for Redis management
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: redis-insight
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    networks:
      - agent-network

  # ============================================
  # STORAGE LAYER
  # ============================================

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_PROMETHEUS_AUTH_TYPE: public
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    networks:
      - agent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ============================================
  # SERVICE MESH & DISCOVERY
  # ============================================

  # Consul for service discovery
  consul:
    image: consul:latest
    container_name: consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0
    volumes:
      - consul_data:/consul/data
    networks:
      - agent-network

  # ============================================
  # LOAD BALANCING
  # ============================================

  # HAProxy for load balancing
  haproxy:
    image: haproxy:alpine
    container_name: haproxy
    ports:
      - "80:80"
      - "443:443"
      - "8404:8404"  # Stats
    volumes:
      - ./config/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    networks:
      - agent-network
    depends_on:
      - consul

volumes:
  # Database volumes
  auth_data:
  agent_data:
  workflow_data:
  integration_data:
  aimodel_data:
  
  # Cache volumes
  redis_master_data:
  
  # Message queue volumes
  rabbitmq_data:
  zookeeper_data:
  zookeeper_log:
  kafka_data:
  
  # Observability volumes
  elastic_data:
  prometheus_data:
  grafana_data:
  influxdb_data:
  influxdb_config:
  
  # Management volumes
  pgadmin_data:
  redis_insight_data:
  
  # Storage volumes
  minio_data:
  
  # Service discovery volumes
  consul_data:

networks:
  agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
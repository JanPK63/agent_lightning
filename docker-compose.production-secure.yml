include:
  - docker/networks.yml
  - docker/volumes.yml
  - docker/security/secrets.yml

services:
  postgres:
    build: ./docker/services/postgres
    container_name: agent-postgres
    environment:
      POSTGRES_DB: agent_lightning_memory
      POSTGRES_USER: agent_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - database
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent_user -d agent_lightning_memory"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  redis:
    image: redis:7-alpine
    container_name: agent-redis
    command: redis-server --requirepass-file /run/secrets/redis_password --maxmemory 256mb --maxmemory-policy allkeys-lru
    secrets:
      - redis_password
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  api:
    build: 
      context: .
      dockerfile: ./docker/security/Dockerfile.secure
    container_name: agent-api
    environment:
      - DATABASE_URL=postgresql://agent_user@postgres:5432/agent_lightning_memory
      - REDIS_URL=redis://redis:6379/0
      - APP_ENV=production
    secrets:
      - postgres_password
      - redis_password
      - jwt_secret
    ports:
      - "127.0.0.1:8001:8001"
    volumes:
      - app_logs:/app/logs
    networks:
      - frontend
      - backend
      - database
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  nginx:
    image: nginx:alpine
    container_name: agent-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/configs/ssl:/etc/nginx/ssl:ro
    networks:
      - frontend
    depends_on:
      - api
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
#!/usr/bin/env python3
"""
Integration between AI Agents and Code Executor
Allows agents to generate and execute code based on natural language tasks
"""

import os
import json
import asyncio
from typing import Dict, Any, List, Optional
from pathlib import Path
import openai

from code_executor import (
    CodeExecutor, 
    ExecutionConfig, 
    ExecutionMode,
    AgentCodeExecutor,
    FileOperation
)
from aws_deployment import AWSConfig, AWSDeploymentManager, get_ubuntu_server_config
from knowledge_manager import KnowledgeManager
from agent_config import AgentConfigManager


class AgentCodeGenerator:
    """Generate code based on agent knowledge and task requirements"""
    
    def __init__(self, agent_name: str):
        self.agent_name = agent_name
        self.knowledge_manager = KnowledgeManager()
        self.config_manager = AgentConfigManager()
        self.agent_config = self.config_manager.get_agent(agent_name)
    
    def generate_code_from_task(self, task: str, language: str = "python") -> Dict[str, str]:
        """Generate code files based on task description"""
        
        # Search for relevant knowledge
        relevant_knowledge = self.knowledge_manager.search_knowledge(
            self.agent_name,
            task,
            limit=5
        )
        
        # Build context from knowledge
        context = self._build_context(relevant_knowledge)
        
        # Generate code using agent's expertise
        code_snippets = self._generate_code_snippets(task, language, context)
        
        return code_snippets
    
    def _build_context(self, knowledge_items) -> str:
        """Build context from knowledge items"""
        context = "Relevant knowledge:\n"
        
        for item in knowledge_items[:3]:
            if item.category == "code_examples":
                context += f"\nExample code:\n{item.content[:500]}\n"
            elif item.category == "best_practices":
                context += f"\nBest practice: {item.content[:200]}\n"
        
        return context
    
    def _generate_code_snippets(self, task: str, language: str, context: str) -> Dict[str, str]:
        """Generate actual code snippets"""
        
        # Use OpenAI if available
        api_key = os.getenv("OPENAI_API_KEY")
        
        if api_key:
            return self._generate_with_openai(task, language, context, api_key)
        else:
            return self._generate_template_based(task, language)
    
    def _generate_with_openai(self, task: str, language: str, context: str, api_key: str) -> Dict[str, str]:
        """Generate code using OpenAI API"""
        
        client = openai.OpenAI(api_key=api_key)
        
        prompt = f"""As a {self.agent_config.description if self.agent_config else 'developer'}, 
        generate code to accomplish this task: {task}
        
        Language: {language}
        
        {context}
        
        Return a JSON object with file paths as keys and code content as values.
        Example: {{"main.py": "code here", "requirements.txt": "dependencies"}}
        """
        
        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": f"You are a {self.agent_name} that generates production-ready code."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=2000
            )
            
            # Parse the response
            code_json = response.choices[0].message.content
            
            # Try to extract JSON from the response
            import re
            json_match = re.search(r'\{.*\}', code_json, re.DOTALL)
            if json_match:
                return json.loads(json_match.group())
            
        except Exception as e:
            print(f"OpenAI generation failed: {e}")
        
        return self._generate_template_based(task, language)
    
    def _generate_template_based(self, task: str, language: str) -> Dict[str, str]:
        """Generate code based on templates"""
        
        task_lower = task.lower()
        
        # Python templates
        if language == "python":
            if "api" in task_lower or "web" in task_lower:
                return {
                    "app.py": """from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Optional, List
import uvicorn

app = FastAPI(title="Agent Generated API")

class Item(BaseModel):
    id: int
    name: str
    description: Optional[str] = None

items_db = []

@app.get("/")
async def root():
    return {"message": "API generated by Agent Lightning"}

@app.post("/items/", response_model=Item)
async def create_item(item: Item):
    items_db.append(item)
    return item

@app.get("/items/", response_model=List[Item])
async def get_items():
    return items_db

@app.get("/items/{item_id}", response_model=Item)
async def get_item(item_id: int):
    for item in items_db:
        if item.id == item_id:
            return item
    raise HTTPException(status_code=404, detail="Item not found")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
""",
                    "requirements.txt": "fastapi\nuvicorn\npydantic",
                    "README.md": f"# Agent Generated API\n\nGenerated for task: {task}\n\n## Run\n```bash\npip install -r requirements.txt\npython app.py\n```"
                }
            
            elif "script" in task_lower or "automation" in task_lower:
                return {
                    "script.py": """#!/usr/bin/env python3
\"\"\"
Automation script generated by Agent Lightning
\"\"\"

import os
import sys
import argparse
from pathlib import Path

def main():
    parser = argparse.ArgumentParser(description='Agent generated script')
    parser.add_argument('--input', help='Input file or directory')
    parser.add_argument('--output', help='Output file or directory')
    parser.add_argument('--verbose', action='store_true', help='Verbose output')
    
    args = parser.parse_args()
    
    if args.verbose:
        print(f"Processing: {args.input}")
    
    # Add your automation logic here
    if args.input:
        input_path = Path(args.input)
        if input_path.exists():
            print(f"Found: {input_path}")
            # Process the input
        else:
            print(f"Error: {input_path} not found")
            sys.exit(1)
    
    print("Task completed successfully!")

if __name__ == "__main__":
    main()
""",
                    "requirements.txt": "# Add dependencies here",
                    "README.md": f"# Automation Script\n\nGenerated for task: {task}"
                }
        
        # JavaScript/Node.js templates
        elif language in ["javascript", "js", "node"]:
            if "api" in task_lower or "web" in task_lower:
                return {
                    "server.js": """const express = require('express');
const app = express();
const port = process.env.PORT || 3000;

app.use(express.json());

// In-memory storage
let items = [];

app.get('/', (req, res) => {
    res.json({ message: 'API generated by Agent Lightning' });
});

app.post('/items', (req, res) => {
    const item = req.body;
    items.push(item);
    res.status(201).json(item);
});

app.get('/items', (req, res) => {
    res.json(items);
});

app.get('/items/:id', (req, res) => {
    const item = items.find(i => i.id === parseInt(req.params.id));
    if (!item) {
        return res.status(404).json({ error: 'Item not found' });
    }
    res.json(item);
});

app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});
""",
                    "package.json": """{
  "name": "agent-generated-api",
  "version": "1.0.0",
  "description": "Generated by Agent Lightning",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.18.0"
  },
  "devDependencies": {
    "nodemon": "^2.0.0"
  }
}""",
                    "README.md": f"# Node.js API\n\nGenerated for task: {task}\n\n## Run\n```bash\nnpm install\nnpm start\n```"
                }
        
        # Default template
        return {
            "main.py": f"""#!/usr/bin/env python3
\"\"\"
Code generated by Agent Lightning
Task: {task}
\"\"\"

def main():
    # TODO: Implement {task}
    print("Implementing: {task}")
    pass

if __name__ == "__main__":
    main()
""",
            "README.md": f"# Agent Generated Code\n\nTask: {task}"
        }


class IntegratedAgentExecutor:
    """Main class integrating agents with code execution"""
    
    def __init__(self, agent_name: str, execution_config: ExecutionConfig):
        self.agent_name = agent_name
        self.code_generator = AgentCodeGenerator(agent_name)
        self.code_executor = CodeExecutor(execution_config)
        self.agent_executor = AgentCodeExecutor(self.code_executor)
    
    async def execute_task(self, task: str, deploy_to_aws: bool = False) -> Dict[str, Any]:
        """Execute a complete task from natural language to deployed code"""
        
        result = {
            "task": task,
            "agent": self.agent_name,
            "generated_files": {},
            "execution_results": [],
            "deployment": None,
            "success": False
        }
        
        try:
            # Step 1: Generate code
            print(f"🤖 {self.agent_name} generating code for: {task}")
            code_snippets = self.code_generator.generate_code_from_task(task)
            result["generated_files"] = code_snippets
            
            # Step 2: Implement the code
            print("📝 Implementing generated code...")
            impl_result = await self.agent_executor.implement_feature(task, code_snippets)
            result["execution_results"].append(impl_result)
            
            # Step 3: Test if possible
            if "test" in code_snippets or "spec" in code_snippets:
                print("🧪 Running tests...")
                test_result = await self.agent_executor.run_tests()
                result["execution_results"].append({
                    "type": "test",
                    "output": test_result.output,
                    "success": test_result.success
                })
            
            # Step 4: Deploy if requested
            if deploy_to_aws and impl_result["success"]:
                print("☁️ Deploying to AWS...")
                deploy_result = await self._deploy_to_aws(code_snippets)
                result["deployment"] = deploy_result
            
            result["success"] = impl_result["success"]
            
        except Exception as e:
            result["error"] = str(e)
        
        finally:
            self.code_executor.close()
        
        return result
    
    async def _deploy_to_aws(self, code_snippets: Dict[str, str]) -> Dict[str, Any]:
        """Deploy code to AWS"""
        
        aws_config = AWSConfig(region="us-east-1")
        manager = AWSDeploymentManager(aws_config)
        
        try:
            instance_info = manager.get_or_create_instance()
            
            # Get executor for AWS instance
            aws_exec_config = manager.get_executor_config(instance_info)
            aws_executor = CodeExecutor(aws_exec_config)
            aws_agent_executor = AgentCodeExecutor(aws_executor)
            
            # Deploy the code
            deploy_result = await aws_agent_executor.implement_feature(
                "Deploy to AWS",
                code_snippets
            )
            
            # Run deployment script if exists
            if "deploy.sh" in code_snippets:
                await aws_executor.execute_command("chmod +x deploy.sh")
                run_result = await aws_executor.execute_command("./deploy.sh")
                deploy_result["deployment_output"] = run_result.output
            
            deploy_result["instance_info"] = instance_info
            aws_executor.close()
            
            return deploy_result
            
        except Exception as e:
            return {"error": str(e)}


# Example usage
async def example_usage():
    """Example of using the integrated agent executor"""
    
    # Local execution
    local_config = ExecutionConfig(
        mode=ExecutionMode.LOCAL,
        working_directory="/tmp/agent_workspace"
    )
    
    # Create executor for full-stack developer agent
    executor = IntegratedAgentExecutor("full_stack_developer", local_config)
    
    # Execute a task
    result = await executor.execute_task(
        "Create a REST API for managing a todo list with CRUD operations",
        deploy_to_aws=False
    )
    
    print("\n📋 Task Execution Result:")
    print(json.dumps(result, indent=2, default=str))
    
    # For Ubuntu server deployment
    ubuntu_config = get_ubuntu_server_config(
        server_ip="your-server-ip",
        username="ubuntu",
        key_path="/path/to/key.pem"
    )
    
    # executor = IntegratedAgentExecutor("devops_engineer", ubuntu_config)
    # result = await executor.execute_task("Deploy the application to Ubuntu server")


if __name__ == "__main__":
    asyncio.run(example_usage())
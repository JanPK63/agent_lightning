[
  {
    "id": "code_examples_83047f03_20250902130927",
    "category": "code_examples",
    "content": "Kubernetes deployment with health checks:\n                \napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n      - name: app\n        image: myapp:latest\n        ports:\n        - containerPort: 8080\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8080\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8080",
    "source": "k8s_patterns",
    "timestamp": "2025-09-02T13:09:27.755641",
    "metadata": {},
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_40066d7f_20250902131139",
    "category": "code_examples",
    "content": "Class RLLightningClient:\nEnhanced Lightning Client for RL trajectory collection\n\nMethods: ['__init__', 'load_server_config', 'multi_agent_mdp_function', 'run']",
    "source": "codebase:lightning_client_rl.py",
    "timestamp": "2025-09-02T13:11:39.448855",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/lightning_client_rl.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_71e78d75_20250902131139",
    "category": "api_references",
    "content": "def main()\nMain entry point for the client",
    "source": "codebase:lightning_client_rl.py",
    "timestamp": "2025-09-02T13:11:39.449562",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/lightning_client_rl.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_6a45f1c3_20250902131139",
    "category": "api_references",
    "content": "def __init__(self, server_url)\nInitialize the Lightning Client",
    "source": "codebase:lightning_client_rl.py",
    "timestamp": "2025-09-02T13:11:39.449756",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/lightning_client_rl.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_fcc22f86_20250902131139",
    "category": "api_references",
    "content": "def load_server_config(self)\nLoad server configuration",
    "source": "codebase:lightning_client_rl.py",
    "timestamp": "2025-09-02T13:11:39.449885",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/lightning_client_rl.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_4c2875f1_20250902131139",
    "category": "api_references",
    "content": "def multi_agent_mdp_function(self, state)\nPlaceholder for MDP agent function\nThis will be replaced with actual MDP implementation",
    "source": "codebase:lightning_client_rl.py",
    "timestamp": "2025-09-02T13:11:39.450007",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/lightning_client_rl.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_4c6e3434_20250902131139",
    "category": "api_references",
    "content": "def run(self)\nMain execution loop",
    "source": "codebase:lightning_client_rl.py",
    "timestamp": "2025-09-02T13:11:39.450130",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/lightning_client_rl.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_c5fb8838_20250902131139",
    "category": "code_examples",
    "content": "Class AgentLightningClient:\nClient for interacting with Agent Lightning API\n\nMethods: ['__init__', 'authenticate', 'create_task', 'execute_task', 'chat_with_agent', 'get_agent_status', 'list_available_agents']",
    "source": "codebase:agent_client.py",
    "timestamp": "2025-09-02T13:11:39.452515",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agent_client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_088ec96c_20250902131139",
    "category": "api_references",
    "content": "def main()\nExample usage of Agent Lightning Client",
    "source": "codebase:agent_client.py",
    "timestamp": "2025-09-02T13:11:39.452836",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agent_client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_70285355_20250902131139",
    "category": "api_references",
    "content": "def authenticate(self, username, password)\nAuthenticate with the API",
    "source": "codebase:agent_client.py",
    "timestamp": "2025-09-02T13:11:39.453020",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agent_client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_c6956f55_20250902131139",
    "category": "api_references",
    "content": "def create_task(self, task_description, agent_type, context)\nCreate a new task for an agent",
    "source": "codebase:agent_client.py",
    "timestamp": "2025-09-02T13:11:39.453207",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agent_client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_617249b3_20250902131139",
    "category": "api_references",
    "content": "def execute_task(self, task_id)\nExecute a task and get the result",
    "source": "codebase:agent_client.py",
    "timestamp": "2025-09-02T13:11:39.453384",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agent_client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_995ef9aa_20250902131139",
    "category": "api_references",
    "content": "def chat_with_agent(self, message, agent_id)\nHave a conversation with a specific agent",
    "source": "codebase:agent_client.py",
    "timestamp": "2025-09-02T13:11:39.453571",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agent_client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_90fce41d_20250902131139",
    "category": "api_references",
    "content": "def get_agent_status(self, agent_id)\nGet the status of a specific agent",
    "source": "codebase:agent_client.py",
    "timestamp": "2025-09-02T13:11:39.453779",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agent_client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_55f05cbe_20250902131139",
    "category": "api_references",
    "content": "def list_available_agents(self)\nList all available agents",
    "source": "codebase:agent_client.py",
    "timestamp": "2025-09-02T13:11:39.453979",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agent_client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_bbbd0504_20250902131139",
    "category": "code_examples",
    "content": "Class EnhancedAgentService:\nEnhanced agent service with knowledge management\n\nMethods: ['__init__', '_load_specialized_agents', '_create_enhanced_agent', '_select_best_agent']",
    "source": "codebase:enhanced_production_api.py",
    "timestamp": "2025-09-02T13:11:39.456221",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/enhanced_production_api.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_54c06f7d_20250902131139",
    "category": "api_references",
    "content": "def _load_specialized_agents(self)\nLoad all configured specialized agents",
    "source": "codebase:enhanced_production_api.py",
    "timestamp": "2025-09-02T13:11:39.456566",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/enhanced_production_api.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_ff53c07b_20250902131139",
    "category": "api_references",
    "content": "def _create_enhanced_agent(self, config)\nCreate an agent with knowledge integration",
    "source": "codebase:enhanced_production_api.py",
    "timestamp": "2025-09-02T13:11:39.456850",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/enhanced_production_api.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_af7d2978_20250902131139",
    "category": "api_references",
    "content": "def _select_best_agent(self, task)\nSelect the best agent for a task based on content",
    "source": "codebase:enhanced_production_api.py",
    "timestamp": "2025-09-02T13:11:39.457175",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/enhanced_production_api.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_91e6fe8b_20250902131139",
    "category": "code_examples",
    "content": "Class MetricSnapshot:\nSnapshot of metrics at a point in time\n\nMethods: []",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.467894",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_86d000ad_20250902131139",
    "category": "code_examples",
    "content": "Class DashboardConfig:\nConfiguration for monitoring dashboard\n\nMethods: []",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.468497",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_6c368732_20250902131139",
    "category": "code_examples",
    "content": "Class MetricsCollector:\nCollects and stores metrics for dashboard\n\nMethods: ['__init__', 'add_metric', '_check_alerts', 'get_recent_metrics']",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.468862",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_1e247c62_20250902131139",
    "category": "code_examples",
    "content": "Class MonitoringDashboard:\nMain monitoring dashboard for Agent Lightning\nProvides real-time visualization of training and performance metrics\n\nMethods: ['__init__', 'create_dashboard', '_render_training_metrics', '_render_agent_performance', '_render_system_resources', '_render_alerts', '_render_analytics', '_get_available_agents', '_get_latest_metric', '_calculate_delta', '_get_agent_status', '_get_metric_history', '_create_line_chart', '_create_gauge', '_create_agent_comparison_chart', '_create_response_time_histogram', '_create_completion_heatmap', '_calculate_trends', '_calculate_correlations', '_generate_predictions', '_render_task_assignment', '_render_agent_knowledge']",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.469170",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_a9fda6bd_20250902131139",
    "category": "api_references",
    "content": "def run_dashboard()\nRun the monitoring dashboard",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.469476",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_37f3f3b6_20250902131139",
    "category": "api_references",
    "content": "def add_metric(self, snapshot)\nAdd a metric snapshot",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.469798",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_f865943d_20250902131139",
    "category": "api_references",
    "content": "def _check_alerts(self, snapshot)\nCheck if metric triggers any alerts",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.470175",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d93736e0_20250902131139",
    "category": "api_references",
    "content": "def get_recent_metrics(self, metric_name, agent_id, window_seconds)\nGet recent metrics as DataFrame",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.470612",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_2e5ee2bb_20250902131139",
    "category": "api_references",
    "content": "def create_dashboard(self)\nCreate Streamlit dashboard",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.470934",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_22d3d66d_20250902131139",
    "category": "api_references",
    "content": "def _render_training_metrics(self, agents, metrics, window)\nRender training metrics tab",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.471232",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_381cd5b2_20250902131139",
    "category": "api_references",
    "content": "def _render_agent_performance(self, agents, window)\nRender agent performance tab",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.471532",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9d4ba68a_20250902131139",
    "category": "api_references",
    "content": "def _render_system_resources(self)\nRender system resources tab",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.471840",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_cbbbb26b_20250902131139",
    "category": "api_references",
    "content": "def _render_alerts(self)\nRender alerts tab",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.472161",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_2919beb8_20250902131139",
    "category": "api_references",
    "content": "def _render_analytics(self, agents, window)\nRender analytics tab",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.472486",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_98d4b3cd_20250902131139",
    "category": "api_references",
    "content": "def _get_available_agents(self)\nGet list of available agents",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.472846",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_bd5d0c1e_20250902131139",
    "category": "api_references",
    "content": "def _get_latest_metric(self, metric_name)\nGet latest value for a metric",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.473204",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_0cd48246_20250902131139",
    "category": "api_references",
    "content": "def _calculate_delta(self, metric_name, percentage)\nCalculate metric delta",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.473567",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_36b60adc_20250902131139",
    "category": "api_references",
    "content": "def _get_agent_status(self, agent_id)\nGet agent status",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.473929",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_bd8d723b_20250902131139",
    "category": "api_references",
    "content": "def _get_metric_history(self, metric_name, window_seconds)\nGet metric history",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.474291",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_55d79716_20250902131139",
    "category": "api_references",
    "content": "def _create_line_chart(self, metric, agents, window, title, y_label)\nCreate line chart for metric",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.474661",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_6880ab88_20250902131139",
    "category": "api_references",
    "content": "def _create_gauge(self, value, title, max_value, unit)\nCreate gauge chart",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.475044",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_6207e0c3_20250902131139",
    "category": "api_references",
    "content": "def _create_agent_comparison_chart(self, agents)\nCreate agent comparison chart",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.475437",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1db9c2f4_20250902131139",
    "category": "api_references",
    "content": "def _create_response_time_histogram(self, agents, window)\nCreate response time histogram",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.475893",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d452b6ca_20250902131139",
    "category": "api_references",
    "content": "def _create_completion_heatmap(self, agents)\nCreate task completion heatmap",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.476318",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_4ff3eee5_20250902131139",
    "category": "api_references",
    "content": "def _calculate_trends(self, agents, window)\nCalculate performance trends",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.476743",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_2c67609b_20250902131139",
    "category": "api_references",
    "content": "def _calculate_correlations(self)\nCalculate metric correlations",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.477171",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_083d528b_20250902131139",
    "category": "api_references",
    "content": "def _generate_predictions(self, agents)\nGenerate performance predictions",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.477606",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_c80025a0_20250902131139",
    "category": "api_references",
    "content": "def _render_task_assignment(self)\nRender task assignment interface",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.478046",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_5ec8d822_20250902131139",
    "category": "api_references",
    "content": "def _render_agent_knowledge(self)\nRender agent knowledge management interface",
    "source": "codebase:monitoring_dashboard.py",
    "timestamp": "2025-09-02T13:11:39.478475",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/monitoring_dashboard.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_28de2b26_20250902131139",
    "category": "code_examples",
    "content": "Class DatasetValidator:\nValidates Agent Lightning system using real datasets\nTests end-to-end functionality with Calc-X and Spider\n\nMethods: ['__init__', 'load_dataset', 'generate_sample_data', 'extract_answer', 'extract_sql', 'check_math_answer', 'validate_sql_syntax']",
    "source": "codebase:test_datasets_validation.py",
    "timestamp": "2025-09-02T13:11:39.483208",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/test_datasets_validation.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_4a4840fd_20250902131139",
    "category": "api_references",
    "content": "def __init__(self)\nInitialize dataset validator",
    "source": "codebase:test_datasets_validation.py",
    "timestamp": "2025-09-02T13:11:39.483759",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/test_datasets_validation.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d354b625_20250902131139",
    "category": "api_references",
    "content": "def load_dataset(self, dataset_name)\nLoad dataset from file",
    "source": "codebase:test_datasets_validation.py",
    "timestamp": "2025-09-02T13:11:39.484243",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/test_datasets_validation.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_b7c7d768_20250902131139",
    "category": "api_references",
    "content": "def generate_sample_data(self, dataset_name, path)\nGenerate sample data if dataset doesn't exist",
    "source": "codebase:test_datasets_validation.py",
    "timestamp": "2025-09-02T13:11:39.484732",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/test_datasets_validation.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_58148f81_20250902131139",
    "category": "api_references",
    "content": "def extract_answer(self, results)\nExtract math answer from workflow results",
    "source": "codebase:test_datasets_validation.py",
    "timestamp": "2025-09-02T13:11:39.485224",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/test_datasets_validation.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_79a21416_20250902131139",
    "category": "api_references",
    "content": "def extract_sql(self, results)\nExtract SQL from workflow results",
    "source": "codebase:test_datasets_validation.py",
    "timestamp": "2025-09-02T13:11:39.485733",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/test_datasets_validation.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_30e293f7_20250902131139",
    "category": "api_references",
    "content": "def check_math_answer(self, predicted, ground_truth)\nCheck if math answer is correct",
    "source": "codebase:test_datasets_validation.py",
    "timestamp": "2025-09-02T13:11:39.486266",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/test_datasets_validation.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_dbc73ec2_20250902131139",
    "category": "api_references",
    "content": "def validate_sql_syntax(self, sql)\nBasic SQL syntax validation",
    "source": "codebase:test_datasets_validation.py",
    "timestamp": "2025-09-02T13:11:39.486795",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/test_datasets_validation.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_d9d81ad2_20250902131139",
    "category": "code_examples",
    "content": "Class AgentLightningEnv:\nMulti-agent environment for Agent Lightning\nWraps agent execution in a Gym-compatible interface\n\nMethods: ['__init__', 'reset', 'step', '_get_observation', '_calculate_shared_reward', '_calculate_individual_reward']",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.490491",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_2c9446a9_20250902131139",
    "category": "code_examples",
    "content": "Class HierarchicalRLModel:\nHierarchical RL model for Agent Lightning\nImplements high-level and low-level policies\n\nMethods: ['__init__', 'forward', 'value_function']",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.491112",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_06a27560_20250902131139",
    "category": "code_examples",
    "content": "Class RayDistributedTrainer:\nDistributed training orchestrator using Ray\nManages distributed RL training for Agent Lightning\n\nMethods: ['__init__', 'initialize_ray', 'create_ppo_config', 'train', 'evaluate', 'shutdown']",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.491669",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_5189cd67_20250902131139",
    "category": "code_examples",
    "content": "Class DistributedAgentWorker:\nRemote worker for distributed agent execution\n\nMethods: ['__init__', 'process_episode', 'get_stats']",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.492216",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_46c883fe_20250902131139",
    "category": "api_references",
    "content": "def setup_distributed_workers(num_workers)\nSetup distributed workers",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.492756",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_aeb20cb5_20250902131139",
    "category": "api_references",
    "content": "def distributed_data_collection(workers, tasks)\nCollect data using distributed workers",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.493311",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_b3d64db7_20250902131139",
    "category": "api_references",
    "content": "def __init__(self, config)\nInitialize the environment",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.493874",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_43bbe504_20250902131139",
    "category": "api_references",
    "content": "def reset(self)\nReset the environment",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.494493",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7bb84432_20250902131139",
    "category": "api_references",
    "content": "def step(self, actions)\nExecute actions and return results",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.495107",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_11db1922_20250902131139",
    "category": "api_references",
    "content": "def _get_observation(self, agent_id)\nGet observation for an agent",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.495730",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_eb1d56f0_20250902131139",
    "category": "api_references",
    "content": "def _calculate_shared_reward(self, actions)\nCalculate shared reward for cooperative agents",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.496428",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_4df93249_20250902131139",
    "category": "api_references",
    "content": "def _calculate_individual_reward(self, agent_id, action)\nCalculate individual reward for an agent",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.497084",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_76dd2cc7_20250902131139",
    "category": "api_references",
    "content": "def forward(self, input_dict, state, seq_lens)\nForward pass",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.497864",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_5f31f840_20250902131139",
    "category": "api_references",
    "content": "def value_function(self)\nReturn value function output",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.498668",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_3ff4095b_20250902131139",
    "category": "api_references",
    "content": "def __init__(self, num_workers, num_gpus, checkpoint_dir)\nInitialize Ray distributed trainer\n\nArgs:\n    num_workers: Number of parallel workers\n    num_gpus: Number of GPUs to use\n    checkpoint_dir: Directory for checkpoints",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.499445",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_93c1b5e6_20250902131139",
    "category": "api_references",
    "content": "def initialize_ray(self, address)\nInitialize Ray cluster",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.500225",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7da84772_20250902131139",
    "category": "api_references",
    "content": "def create_ppo_config(self)\nCreate PPO configuration for hierarchical RL",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.502961",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_71e5dc68_20250902131139",
    "category": "api_references",
    "content": "def train(self, num_iterations)\nRun distributed training",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.503764",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d16f6011_20250902131139",
    "category": "api_references",
    "content": "def evaluate(self, checkpoint_path)\nEvaluate the trained model",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.504494",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_58c5566c_20250902131139",
    "category": "api_references",
    "content": "def shutdown(self)\nShutdown Ray cluster",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.505161",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_f2690ca8_20250902131139",
    "category": "api_references",
    "content": "def process_episode(self, task)\nProcess a single episode",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.505848",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_12f215dd_20250902131139",
    "category": "api_references",
    "content": "def get_stats(self)\nGet worker statistics",
    "source": "codebase:ray_distributed_config.py",
    "timestamp": "2025-09-02T13:11:39.506528",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/ray_distributed_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_4be15e4f_20250902131139",
    "category": "code_examples",
    "content": "Class MemoryEntry:\nSingle memory entry with metadata\n\nMethods: ['to_dict', 'update_access', 'get_recency_score', 'get_relevance_score']",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.512650",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_5adc83c0_20250902131139",
    "category": "code_examples",
    "content": "Class MemoryManager:\nAdvanced memory management system for agents\nImplements cognitive-inspired memory architecture\n\nMethods: ['__init__', 'store_episodic', 'store_semantic', 'store_procedural', 'retrieve_relevant', 'retrieve_recent', 'retrieve_procedural', 'update_procedural_performance', 'consolidate_to_semantic', '_search_episodic', '_search_semantic', '_rank_memories', '_consolidate_episodic_memory', '_consolidate_semantic_memory', '_merge_semantic_knowledge', '_extract_pattern', '_consolidate_pattern', '_extract_concepts', '_generate_embedding', '_cosine_similarity', '_generate_memory_id', 'save_persistent_memory', 'load_persistent_memory', 'get_statistics']",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.513481",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7cf84951_20250902131139",
    "category": "api_references",
    "content": "def to_dict(self)\nConvert to dictionary for serialization",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.514194",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_32bae1df_20250902131139",
    "category": "api_references",
    "content": "def update_access(self)\nUpdate access metadata",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.514903",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_bcf44b81_20250902131139",
    "category": "api_references",
    "content": "def get_recency_score(self, current_time)\nCalculate recency score with exponential decay",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.515613",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_651cdd76_20250902131139",
    "category": "api_references",
    "content": "def get_relevance_score(self)\nCalculate overall relevance combining importance, recency, and access frequency",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.516344",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_2f88002d_20250902131139",
    "category": "api_references",
    "content": "def __init__(self, max_episodic_size, max_semantic_size, max_working_size, embedding_dim, persistence_path)\nInitialize memory manager\n\nArgs:\n    max_episodic_size: Maximum episodic memory entries\n    max_semantic_size: Maximum semantic memory entries\n    max_working_size: Maximum working memory entries\n    embedding_dim: Dimension of memory embeddings\n    persistence_path: Path for persistent memory storage",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.517073",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7faf9a16_20250902131139",
    "category": "api_references",
    "content": "def store_episodic(self, content, importance)\nStore an episodic memory (specific experience)\n\nArgs:\n    content: Memory content\n    importance: Importance score (0-1)\n    \nReturns:\n    Memory ID",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.517813",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_b3504e0d_20250902131139",
    "category": "api_references",
    "content": "def store_semantic(self, concept, content, importance)\nStore semantic memory (general knowledge)\n\nArgs:\n    concept: Concept or category\n    content: Knowledge content\n    importance: Importance score\n    \nReturns:\n    Memory ID",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.518602",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_38beeb6e_20250902131139",
    "category": "api_references",
    "content": "def store_procedural(self, skill_name, procedure)\nStore procedural memory (how to do things)\n\nArgs:\n    skill_name: Name of the skill/procedure\n    procedure: Procedure details (steps, conditions, etc.)\n    \nReturns:\n    Skill ID",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.519657",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_ba2cbe86_20250902131139",
    "category": "api_references",
    "content": "def retrieve_relevant(self, query, k, memory_types)\nRetrieve k most relevant memories for a query\n\nArgs:\n    query: Query content\n    k: Number of memories to retrieve\n    memory_types: Types of memory to search (episodic, semantic, procedural)\n    \nReturns:\n    List of relevant memories",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.520614",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_706b79db_20250902131139",
    "category": "api_references",
    "content": "def retrieve_recent(self, k)\nRetrieve k most recent memories from working memory",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.521522",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_094710df_20250902131139",
    "category": "api_references",
    "content": "def retrieve_procedural(self, skill_name)\nRetrieve a procedural memory (skill)",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.522389",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_c68c8b0c_20250902131139",
    "category": "api_references",
    "content": "def update_procedural_performance(self, skill_name, success)\nUpdate performance statistics for a procedural memory",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.523311",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_f2ba9d30_20250902131139",
    "category": "api_references",
    "content": "def consolidate_to_semantic(self, threshold)\nConsolidate repeated episodic memories into semantic memory\nThis mimics how humans form general knowledge from specific experiences",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.524190",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d1424bf2_20250902131139",
    "category": "api_references",
    "content": "def _search_episodic(self, query, limit)\nSearch episodic memory",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.524994",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9ae48d25_20250902131139",
    "category": "api_references",
    "content": "def _search_semantic(self, query, limit)\nSearch semantic memory",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.525807",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_f5741a01_20250902131139",
    "category": "api_references",
    "content": "def _rank_memories(self, memories, query)\nRank memories by relevance to query",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.526627",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_c9ece3fa_20250902131139",
    "category": "api_references",
    "content": "def _consolidate_episodic_memory(self)\nRemove least important episodic memories when at capacity",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.527452",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_112c06fc_20250902131139",
    "category": "api_references",
    "content": "def _consolidate_semantic_memory(self)\nConsolidate semantic memory when at capacity",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.528279",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1a982b5d_20250902131139",
    "category": "api_references",
    "content": "def _merge_semantic_knowledge(self, existing, new)\nMerge new knowledge with existing semantic memory",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.529228",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_e7c2bc9c_20250902131139",
    "category": "api_references",
    "content": "def _extract_pattern(self, content)\nExtract pattern from content for consolidation",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.530409",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_6f6a310c_20250902131139",
    "category": "api_references",
    "content": "def _consolidate_pattern(self, memories)\nConsolidate multiple memories into a pattern",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.531427",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_3d582351_20250902131139",
    "category": "api_references",
    "content": "def _extract_concepts(self, content)\nExtract concepts from content",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.532335",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1c4cf5c5_20250902131139",
    "category": "api_references",
    "content": "def _generate_embedding(self, content)\nGenerate embedding for content (placeholder - use real model in production)",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.533249",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_b4af1344_20250902131139",
    "category": "api_references",
    "content": "def _cosine_similarity(self, a, b)\nCalculate cosine similarity between embeddings",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.534209",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_996630ab_20250902131139",
    "category": "api_references",
    "content": "def _generate_memory_id(self, content)\nGenerate unique ID for memory",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.535124",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_789312f7_20250902131139",
    "category": "api_references",
    "content": "def save_persistent_memory(self)\nSave memory to disk",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.536032",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_693335d1_20250902131139",
    "category": "api_references",
    "content": "def load_persistent_memory(self)\nLoad memory from disk",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.537180",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_0a0bbe58_20250902131139",
    "category": "api_references",
    "content": "def get_statistics(self)\nGet memory system statistics",
    "source": "codebase:memory_manager.py",
    "timestamp": "2025-09-02T13:11:39.538352",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/memory_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_1849c2f0_20250902131139",
    "category": "technical_documentation",
    "content": "Current Status \u2705:\n- **Agent Lightning**: Installed (v0.1.2)\n- **PyTorch**: Installed (v2.5.0)\n- **Gymnasium**: Installed (v1.2.0)",
    "source": "codebase:ai-agent-framework-implementation.md",
    "timestamp": "2025-09-02T13:11:39.540048",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/ai-agent-framework-implementation.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_4ceb59ba_20250902131139",
    "category": "technical_documentation",
    "content": "Phase 1: Core Framework Setup:\n- [ ] **1. Optimize Lightning Server** - Enhance current server with hierarchical RL configuration\n- [ ] **2. Create MDP Agent Definitions** - Define states, actions, and rewards\n- [ ] **3. Implement Multi-Agent System** - Set up role-based agents",
    "source": "codebase:ai-agent-framework-implementation.md",
    "timestamp": "2025-09-02T13:11:39.541255",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/ai-agent-framework-implementation.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_0eafc3f0_20250902131139",
    "category": "technical_documentation",
    "content": "Phase 2: Data & Training:\n- [ ] **5. Create Training Dataset** - Prepare JSONL format with ground truth\n- [ ] **6. Implement Memory System** - Build context and memory management\n- [ ] **7. Configure Ray** - Set up distributed computing",
    "source": "codebase:ai-agent-framework-implementation.md",
    "timestamp": "2025-09-02T13:11:39.542268",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/ai-agent-framework-implementation.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_414bd742_20250902131139",
    "category": "technical_documentation",
    "content": "Phase 3: Monitoring & Optimization:\n- [ ] **9. Set up OpenTelemetry** - Implement observability\n- [ ] **10. Create Orchestration Workflows** - Design agent coordination\n- [ ] **11. Implement Reward Functions** - Build scoring system",
    "source": "codebase:ai-agent-framework-implementation.md",
    "timestamp": "2025-09-02T13:11:39.543259",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/ai-agent-framework-implementation.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_cffda563_20250902131139",
    "category": "technical_documentation",
    "content": "Phase 4: Advanced Features:\n- [ ] **13. Checkpoint Saving** - Enable model recovery\n- [ ] **14. Batch Accumulation** - Optimize long interactions\n- [ ] **15. AutoGen Integration** - Enhanced multi-agent support",
    "source": "codebase:ai-agent-framework-implementation.md",
    "timestamp": "2025-09-02T13:11:39.544233",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/ai-agent-framework-implementation.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_eb9b0d1a_20250902131139",
    "category": "technical_documentation",
    "content": "Phase 5: Production & Scale:\n- [ ] **17. Monitoring Dashboard** - Training metrics visualization\n- [ ] **18. Selective Optimization** - Targeted agent improvements\n- [ ] **19. VERL Setup** - Model training optimization",
    "source": "codebase:ai-agent-framework-implementation.md",
    "timestamp": "2025-09-02T13:11:39.545249",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/ai-agent-framework-implementation.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_0af2870e_20250902131139",
    "category": "code_examples",
    "content": "Class ProductionAPI:\nMain production API service for Agent Lightning\nHandles REST endpoints, WebSocket connections, and gRPC services\n\nMethods: ['__init__', 'check_rate_limit', 'generate_token', 'verify_token']",
    "source": "codebase:production_api.py",
    "timestamp": "2025-09-02T13:11:39.550982",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/production_api.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_8cc3c342_20250902131139",
    "category": "api_references",
    "content": "def check_rate_limit(self, client_id)\nCheck if client has exceeded rate limit",
    "source": "codebase:production_api.py",
    "timestamp": "2025-09-02T13:11:39.552101",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/production_api.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_016fd371_20250902131139",
    "category": "api_references",
    "content": "def generate_token(self, user_id)\nGenerate JWT token",
    "source": "codebase:production_api.py",
    "timestamp": "2025-09-02T13:11:39.553098",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/production_api.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_849cb9cb_20250902131139",
    "category": "api_references",
    "content": "def verify_token(self, token)\nVerify JWT token",
    "source": "codebase:production_api.py",
    "timestamp": "2025-09-02T13:11:39.554087",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/production_api.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_5856a484_20250902131139",
    "category": "code_examples",
    "content": "Class DistributedConfig:\nConfiguration for distributed training\n\nMethods: []",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.561205",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_11bff5e0_20250902131139",
    "category": "code_examples",
    "content": "Class AgentLightningDataset:\nDataset for distributed training\n\nMethods: ['__init__', '__len__', '__getitem__']",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.562374",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_490d627a_20250902131139",
    "category": "code_examples",
    "content": "Class DistributedAgentModel:\nDistributed model for Agent Lightning\n\nMethods: ['__init__', 'forward']",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.563404",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_82f3d7c3_20250902131139",
    "category": "code_examples",
    "content": "Class DistributedTrainer:\nMain distributed training system for Agent Lightning\nSupports multiple distributed training backends\n\nMethods: ['__init__', 'setup_pytorch_distributed', 'setup_ray_distributed', 'create_model', 'train_step_pytorch', 'train_pytorch_distributed', 'train_ray_distributed', 'train_with_ray_train', 'setup_model_parallelism', 'federated_learning_setup', 'gradient_compression', 'asynchronous_sgd', 'benchmark_distributed_training']",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.564457",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_44efab33_20250902131139",
    "category": "api_references",
    "content": "def __init__(self, data_path, max_samples)\nInitialize dataset\n\nArgs:\n    data_path: Path to training data\n    max_samples: Maximum samples to load",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.565511",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_693135c4_20250902131139",
    "category": "api_references",
    "content": "def __init__(self, config)\nInitialize distributed trainer\n\nArgs:\n    config: Distributed training configuration",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.566796",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_149c5cbe_20250902131139",
    "category": "api_references",
    "content": "def setup_pytorch_distributed(self)\nSetup PyTorch distributed training",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.568056",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_06ff939f_20250902131139",
    "category": "api_references",
    "content": "def setup_ray_distributed(self)\nSetup Ray distributed training",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.569197",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_3df01ab5_20250902131139",
    "category": "api_references",
    "content": "def create_model(self)\nCreate and setup distributed model",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.570288",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_88f17996_20250902131139",
    "category": "api_references",
    "content": "def train_step_pytorch(self, batch)\nSingle training step for PyTorch distributed",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.571390",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_86e562de_20250902131139",
    "category": "api_references",
    "content": "def train_pytorch_distributed(self, num_epochs)\nTrain using PyTorch distributed",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.572464",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_fc8f76cb_20250902131139",
    "category": "code_examples",
    "content": "Class RayWorker:\nRay worker for distributed training\n\nMethods: ['__init__', 'train_batch', 'get_model_state', 'set_model_state']",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.573567",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_c6891001_20250902131139",
    "category": "api_references",
    "content": "def train_ray_distributed(self, num_epochs)\nTrain using Ray distributed",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.574687",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d59e732f_20250902131139",
    "category": "api_references",
    "content": "def train_with_ray_train(self)\nTrain using Ray Train for better integration",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.575805",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_5ffcc44e_20250902131139",
    "category": "api_references",
    "content": "def setup_model_parallelism(self)\nSetup model parallelism for very large models",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.577268",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d2319b87_20250902131139",
    "category": "api_references",
    "content": "def federated_learning_setup(self)\nSetup federated learning for privacy-preserving training",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.578485",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_c1b3a5cb_20250902131139",
    "category": "api_references",
    "content": "def gradient_compression(self, gradients, compression_rate)\nCompress gradients for efficient communication",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.579681",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_2c6b8bb8_20250902131139",
    "category": "api_references",
    "content": "def asynchronous_sgd(self, num_workers, num_iterations)\nImplement Asynchronous SGD for faster convergence",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.580865",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7baa3f74_20250902131139",
    "category": "api_references",
    "content": "def benchmark_distributed_training(self)\nBenchmark different distributed training approaches",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.582122",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_88662a7e_20250902131139",
    "category": "api_references",
    "content": "def train_batch(self, batch)\nTrain on a single batch",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.583335",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_135b3a79_20250902131139",
    "category": "api_references",
    "content": "def get_model_state(self)\nGet model state dict",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.584497",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_6669bf16_20250902131139",
    "category": "api_references",
    "content": "def set_model_state(self, state_dict)\nSet model state dict",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.585737",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_f68ac439_20250902131139",
    "category": "api_references",
    "content": "def train_func(config)\nTraining function for Ray Train",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.587257",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_17ea3a3b_20250902131139",
    "category": "code_examples",
    "content": "Class ModelParallelNetwork:\nModel split across multiple GPUs\n\nMethods: ['__init__', 'forward']",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.588495",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_b165de7b_20250902131139",
    "category": "code_examples",
    "content": "Class FederatedClient:\nClient for federated learning\n\nMethods: ['__init__', '_load_local_data', 'train_local']",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.589700",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1cb505e3_20250902131139",
    "category": "api_references",
    "content": "def _load_local_data(self)\nLoad client's local data",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.590919",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_3a79661e_20250902131139",
    "category": "api_references",
    "content": "def train_local(self, global_weights, num_epochs)\nTrain on local data",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.592149",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_95971f21_20250902131139",
    "category": "api_references",
    "content": "def compute_gradient(self, batch, model_weights)\nCompute gradient for a batch",
    "source": "codebase:distributed_training.py",
    "timestamp": "2025-09-02T13:11:39.593403",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/distributed_training.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_dc50ad3f_20250902131139",
    "category": "code_examples",
    "content": "Class WorkflowType:\nTypes of orchestration workflows\n\nMethods: []",
    "source": "codebase:orchestration_workflows.py",
    "timestamp": "2025-09-02T13:11:39.600313",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/orchestration_workflows.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_98831555_20250902131139",
    "category": "code_examples",
    "content": "Class AgentRole:\nAgent roles in workflows\n\nMethods: []",
    "source": "codebase:orchestration_workflows.py",
    "timestamp": "2025-09-02T13:11:39.602546",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/orchestration_workflows.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_4ea38680_20250902131139",
    "category": "code_examples",
    "content": "Class WorkflowTask:\nRepresents a task in the workflow\n\nMethods: []",
    "source": "codebase:orchestration_workflows.py",
    "timestamp": "2025-09-02T13:11:39.604132",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/orchestration_workflows.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_416381ae_20250902131139",
    "category": "code_examples",
    "content": "Class WorkflowResult:\nResult of workflow execution\n\nMethods: []",
    "source": "codebase:orchestration_workflows.py",
    "timestamp": "2025-09-02T13:11:39.605444",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/orchestration_workflows.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_274ef46e_20250902131139",
    "category": "code_examples",
    "content": "Class OrchestrationWorkflow:\nBase class for agent orchestration workflows\nImplements coordination patterns from Agent Lightning\n\nMethods: ['__init__']",
    "source": "codebase:orchestration_workflows.py",
    "timestamp": "2025-09-02T13:11:39.606952",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/orchestration_workflows.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_5e92847f_20250902131139",
    "category": "code_examples",
    "content": "Class SequentialWorkflow:\nSequential workflow - agents execute one after another\nOutput of one agent becomes input to the next\n\nMethods: ['__init__']",
    "source": "codebase:orchestration_workflows.py",
    "timestamp": "2025-09-02T13:11:39.608288",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/orchestration_workflows.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_1d06f971_20250902131139",
    "category": "code_examples",
    "content": "Class ParallelWorkflow:\nParallel workflow - agents execute simultaneously\nResults are collected and optionally aggregated\n\nMethods: ['__init__']",
    "source": "codebase:orchestration_workflows.py",
    "timestamp": "2025-09-02T13:11:39.609948",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/orchestration_workflows.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_74f38f56_20250902131139",
    "category": "code_examples",
    "content": "Class HierarchicalWorkflow:\nHierarchical workflow - high-level agents coordinate low-level agents\nImplements the hierarchical RL approach from Agent Lightning\n\nMethods: ['__init__', '_parse_plan']",
    "source": "codebase:orchestration_workflows.py",
    "timestamp": "2025-09-02T13:11:39.611512",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/orchestration_workflows.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_de1aa414_20250902131139",
    "category": "code_examples",
    "content": "Class DynamicWorkflow:\nDynamic workflow - agents decide next steps based on results\nImplements adaptive orchestration\n\nMethods: ['__init__']",
    "source": "codebase:orchestration_workflows.py",
    "timestamp": "2025-09-02T13:11:39.613078",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/orchestration_workflows.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_30641a67_20250902131139",
    "category": "code_examples",
    "content": "Class ConsensusWorkflow:\nConsensus workflow - multiple agents vote on decisions\nImplements democratic coordination\n\nMethods: ['__init__']",
    "source": "codebase:orchestration_workflows.py",
    "timestamp": "2025-09-02T13:11:39.614600",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/orchestration_workflows.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_210a5f2f_20250902131139",
    "category": "code_examples",
    "content": "Class MapReduceWorkflow:\nMapReduce workflow - distribute work and aggregate results\nSuitable for data processing and analysis tasks\n\nMethods: ['__init__', '_split_data']",
    "source": "codebase:orchestration_workflows.py",
    "timestamp": "2025-09-02T13:11:39.616136",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/orchestration_workflows.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9b7ead09_20250902131139",
    "category": "api_references",
    "content": "def create_workflow(workflow_type, agents)\nFactory function to create appropriate workflow\n\nArgs:\n    workflow_type: Type of workflow to create\n    agents: Dictionary of agents\n    **kwargs: Additional workflow-specific parameters\n    \nReturns:\n    OrchestrationWorkflow instance",
    "source": "codebase:orchestration_workflows.py",
    "timestamp": "2025-09-02T13:11:39.617567",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/orchestration_workflows.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_e68340bf_20250902131139",
    "category": "api_references",
    "content": "def __init__(self, workflow_type, agents, memory_manager, observability)\nInitialize orchestration workflow\n\nArgs:\n    workflow_type: Type of workflow\n    agents: Dictionary of agents\n    memory_manager: Shared memory manager\n    observability: Observability instance",
    "source": "codebase:orchestration_workflows.py",
    "timestamp": "2025-09-02T13:11:39.618996",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/orchestration_workflows.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_e6aaa1b1_20250902131139",
    "category": "api_references",
    "content": "def _parse_plan(self, plan_text)\nParse plan text into subtasks (simplified)",
    "source": "codebase:orchestration_workflows.py",
    "timestamp": "2025-09-02T13:11:39.620516",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/orchestration_workflows.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_66638e4b_20250902131139",
    "category": "api_references",
    "content": "def _split_data(self, data)\nSplit data for map phase (simplified)",
    "source": "codebase:orchestration_workflows.py",
    "timestamp": "2025-09-02T13:11:39.622022",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/orchestration_workflows.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_1f0f41f4_20250902131139",
    "category": "code_examples",
    "content": "Class AgentRole:\nPredefined agent roles\n\nMethods: []",
    "source": "codebase:agent_config.py",
    "timestamp": "2025-09-02T13:11:39.626473",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agent_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_7d8016e4_20250902131139",
    "category": "code_examples",
    "content": "Class KnowledgeBase:\nKnowledge configuration for an agent\n\nMethods: []",
    "source": "codebase:agent_config.py",
    "timestamp": "2025-09-02T13:11:39.628102",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agent_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_21b3a241_20250902131139",
    "category": "code_examples",
    "content": "Class AgentCapabilities:\nDefine what an agent can do\n\nMethods: []",
    "source": "codebase:agent_config.py",
    "timestamp": "2025-09-02T13:11:39.629647",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agent_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_032bb3b0_20250902131139",
    "category": "code_examples",
    "content": "Class AgentConfig:\nComplete configuration for an agent\n\nMethods: ['to_dict', 'from_dict']",
    "source": "codebase:agent_config.py",
    "timestamp": "2025-09-02T13:11:39.631033",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agent_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_b1a04ebb_20250902131139",
    "category": "code_examples",
    "content": "Class AgentConfigManager:\nManage agent configurations\n\nMethods: ['__init__', 'load_configs', 'save_agent', 'get_agent', 'list_agents', 'delete_agent', 'create_full_stack_developer', 'create_data_scientist']",
    "source": "codebase:agent_config.py",
    "timestamp": "2025-09-02T13:11:39.632429",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agent_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_16f1e2d9_20250902131139",
    "category": "api_references",
    "content": "def to_dict(self)\nConvert to dictionary for JSON serialization",
    "source": "codebase:agent_config.py",
    "timestamp": "2025-09-02T13:11:39.633863",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agent_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_37da92e1_20250902131139",
    "category": "api_references",
    "content": "def from_dict(cls, data)\nCreate from dictionary",
    "source": "codebase:agent_config.py",
    "timestamp": "2025-09-02T13:11:39.635233",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agent_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_276028ab_20250902131139",
    "category": "api_references",
    "content": "def load_configs(self)\nLoad all agent configurations from disk",
    "source": "codebase:agent_config.py",
    "timestamp": "2025-09-02T13:11:39.636609",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agent_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_59ca32bf_20250902131139",
    "category": "api_references",
    "content": "def save_agent(self, agent)\nSave an agent configuration",
    "source": "codebase:agent_config.py",
    "timestamp": "2025-09-02T13:11:39.638017",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agent_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_8fcef0e5_20250902131139",
    "category": "api_references",
    "content": "def get_agent(self, name)\nGet an agent configuration by name",
    "source": "codebase:agent_config.py",
    "timestamp": "2025-09-02T13:11:39.639801",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agent_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_540328bc_20250902131139",
    "category": "api_references",
    "content": "def list_agents(self)\nList all available agents",
    "source": "codebase:agent_config.py",
    "timestamp": "2025-09-02T13:11:39.641418",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agent_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7e3ba0f1_20250902131139",
    "category": "api_references",
    "content": "def delete_agent(self, name)\nDelete an agent configuration",
    "source": "codebase:agent_config.py",
    "timestamp": "2025-09-02T13:11:39.642918",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agent_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_420b309b_20250902131139",
    "category": "api_references",
    "content": "def create_full_stack_developer(self)\nCreate a pre-configured full-stack developer agent",
    "source": "codebase:agent_config.py",
    "timestamp": "2025-09-02T13:11:39.644435",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agent_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_8f939bc3_20250902131139",
    "category": "api_references",
    "content": "def create_data_scientist(self)\nCreate a pre-configured data scientist agent",
    "source": "codebase:agent_config.py",
    "timestamp": "2025-09-02T13:11:39.646049",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agent_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_31b37710_20250902131139",
    "category": "api_references",
    "content": "def quick_task(task_description)\nQuickly assign a task to the best agent",
    "source": "codebase:quick_task.py",
    "timestamp": "2025-09-02T13:11:39.648591",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/quick_task.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_4ae02355_20250902131139",
    "category": "code_examples",
    "content": "Class MetaTask:\nRepresents a task for meta-learning\n\nMethods: []",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.655561",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_aede6744_20250902131139",
    "category": "code_examples",
    "content": "Class MetaLearningConfig:\nConfiguration for meta-learning\n\nMethods: []",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.657298",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_2f369812_20250902131139",
    "category": "code_examples",
    "content": "Class MetaLearningModel:\nNeural network model for meta-learning\nAdapts quickly to new tasks with few examples\n\nMethods: ['__init__', 'forward', 'adapt']",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.658872",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_0d3f125b_20250902131139",
    "category": "code_examples",
    "content": "Class MetaLearner:\nMain meta-learning system for Agent Lightning\nImplements MAML and Reptile algorithms for fast adaptation\n\nMethods: ['__init__', '_build_task_distribution', 'meta_train_step', '_maml_step', '_reptile_step', '_task_to_tensors', 'adapt_to_new_task', 'learn_task_embeddings', '_compute_task_similarities', 'meta_train', '_sample_task_batch', 'evaluate_meta_learning', 'transfer_knowledge', 'save_checkpoint', 'load_checkpoint', 'generate_meta_report']",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.660499",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_6ccc1582_20250902131139",
    "category": "api_references",
    "content": "def forward(self, x, task_embedding)\nForward pass with optional task embedding",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.662130",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_af6712c4_20250902131139",
    "category": "api_references",
    "content": "def adapt(self, support_x, support_y, steps, lr)\nAdapt model to new task using support set\nReturns adapted model",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.663847",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_c155269b_20250902131139",
    "category": "api_references",
    "content": "def __init__(self, config)\nInitialize meta-learner\n\nArgs:\n    config: Meta-learning configuration",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.665644",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_a2cf59c2_20250902131139",
    "category": "api_references",
    "content": "def _build_task_distribution(self)\nBuild distribution of meta-tasks",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.667389",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_0cb6b49a_20250902131139",
    "category": "api_references",
    "content": "def meta_train_step(self, tasks)\nPerform one meta-training step\n\nArgs:\n    tasks: Batch of meta-tasks\n    \nReturns:\n    Meta-loss value",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.670063",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_5c51a1e3_20250902131139",
    "category": "api_references",
    "content": "def _maml_step(self, tasks)\nMAML meta-training step",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.672078",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_2bfabc31_20250902131139",
    "category": "api_references",
    "content": "def _reptile_step(self, tasks)\nReptile meta-training step",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.673718",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_6efb796f_20250902131139",
    "category": "api_references",
    "content": "def _task_to_tensors(self, examples)\nConvert task examples to tensors",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.675425",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1180b62c_20250902131139",
    "category": "api_references",
    "content": "def adapt_to_new_task(self, task, num_steps)\nAdapt to a new task using meta-learned initialization\n\nArgs:\n    task: New task to adapt to\n    num_steps: Number of adaptation steps\n    \nReturns:\n    Adaptation results",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.677171",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9b6b3419_20250902131139",
    "category": "api_references",
    "content": "def learn_task_embeddings(self, tasks)\nLearn embeddings for different task types\n\nArgs:\n    tasks: List of tasks to learn embeddings for\n    \nReturns:\n    Dictionary of task embeddings",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.678912",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_62cf4702_20250902131139",
    "category": "api_references",
    "content": "def _compute_task_similarities(self, embeddings)\nCompute similarities between task embeddings",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.680518",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_8f601252_20250902131139",
    "category": "api_references",
    "content": "def meta_train(self, num_iterations, save_interval)\nFull meta-training loop\n\nArgs:\n    num_iterations: Number of meta-training iterations\n    save_interval: Interval for saving checkpoints",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.682370",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1f01cff5_20250902131139",
    "category": "api_references",
    "content": "def _sample_task_batch(self)\nSample a batch of tasks for meta-training",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.684008",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_c604f417_20250902131139",
    "category": "api_references",
    "content": "def evaluate_meta_learning(self)\nEvaluate meta-learning performance",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.685602",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_4d42d966_20250902131139",
    "category": "api_references",
    "content": "def transfer_knowledge(self, source_task, target_task)\nTransfer knowledge from source to target task\n\nArgs:\n    source_task: Source task ID\n    target_task: Target task ID\n    \nReturns:\n    Transfer effectiveness score",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.687229",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_0075e574_20250902131139",
    "category": "api_references",
    "content": "def save_checkpoint(self, filepath)\nSave meta-learning checkpoint",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.692312",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_fbd2d4ca_20250902131139",
    "category": "api_references",
    "content": "def load_checkpoint(self, filepath)\nLoad meta-learning checkpoint",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.698933",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_2ace5ba4_20250902131139",
    "category": "api_references",
    "content": "def generate_meta_report(self)\nGenerate comprehensive meta-learning report",
    "source": "codebase:meta_learning.py",
    "timestamp": "2025-09-02T13:11:39.700728",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/meta_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_90643491_20250902131139",
    "category": "technical_documentation",
    "content": "Agent Lightning\u26a1:\n\n[![CPU Test](https://github.com/microsoft/agent-lightning/actions/workflows/tests.yml/badge.svg)](https://github.com/microsoft/agent-lightning/actions/workflows/tests.yml)\n[![GPU Test](https://github.com/microsoft/agent-lightning/actions/workflows/examples.yml/badge.svg)](https://github.com/microsoft/agent-lightning/actions/workflows/examples.yml)",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:39.702631",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_8ead41cb_20250902131139",
    "category": "technical_documentation",
    "content": "\u26a1 Core Features:\n\n- Turn your agent into an optimizable beast with **ZERO CODE CHANGE** (almost)! \ud83d\udca4\n- Build with **ANY** agent framework (LangChain, OpenAI Agent SDK, AutoGen, CrewAI, ...); or even WITHOUT agent framework (Python OpenAI). You name it! \ud83e\udd16",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:39.704561",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_1972fd25_20250902131139",
    "category": "technical_documentation",
    "content": "\u26a1 Resources:\n\n- 8/11/2025 [Training AI Agents to Write and Self-correct SQL with Reinforcement Learning](https://medium.com/@yugez/training-ai-agents-to-write-and-self-correct-sql-with-reinforcement-learning-571ed31281ad) Medium.\n- 8/5/2025 [Agent Lightning: Train ANY AI Agents with Reinforcement Learning](https://arxiv.org/abs/2508.03680) arXiv paper.",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:39.706723",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_2352f4b3_20250902131139",
    "category": "technical_documentation",
    "content": "\u26a1 Installation:\n\nFirst, let's get your environment set up. We'll be using `/path/to/agentlightning` to refer to the directory containing this README file.",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:39.708864",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_e79f75df_20250902131139",
    "category": "technical_documentation",
    "content": "1. Set Up Your Environment:\n\nWe strongly recommend creating a new virtual environment to avoid conflicts with other packages. You can use either `conda` or `venv`. **Python 3.10 or later** is recommended.",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:39.710676",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_cd7db67d_20250902131139",
    "category": "technical_documentation",
    "content": "2. Install Core Training Dependencies (Optional):\n\nIf you are running RL with Agent-Lightning, the next step is to install the essential packages: `PyTorch`, `FlashAttention`, `vLLM` and `VERL`. The following versions and installation order have been tested and are confirmed to work.\n",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:39.712401",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_9605d063_20250902131139",
    "category": "technical_documentation",
    "content": "3. Install Agent Lightning:\n\nNow, you're ready to install Agent Lightning itself.\n",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:39.714144",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_a81bdd91_20250902131139",
    "category": "technical_documentation",
    "content": "4. Install Agent Frameworks (Optional):\n\nIf you plan to use other agent frameworks, you can install them with the following commands. If you don't need these, feel free to skip this step.\nWe recommend doing this as the final step to avoid dependency versions being overwritten by mistake.",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:39.715948",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_11f0299a_20250902131139",
    "category": "technical_documentation",
    "content": "AutoGen (Recommended to install first):\npip install \"autogen-agentchat\" \"autogen-ext[openai]\"",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:39.717804",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_9b676e6e_20250902131139",
    "category": "code_examples",
    "content": "Class KnowledgeItem:\nIndividual piece of knowledge\n\nMethods: []",
    "source": "codebase:knowledge_manager.py",
    "timestamp": "2025-09-02T13:11:39.722582",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/knowledge_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_d6ce4a52_20250902131139",
    "category": "code_examples",
    "content": "Class KnowledgeContext:\nContext for a specific task or conversation\n\nMethods: []",
    "source": "codebase:knowledge_manager.py",
    "timestamp": "2025-09-02T13:11:39.724382",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/knowledge_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_8acfba8a_20250902131139",
    "category": "code_examples",
    "content": "Class KnowledgeManager:\nManages knowledge bases for all agents\n\nMethods: ['__init__', 'load_knowledge_bases', 'save_knowledge_base', 'add_knowledge', 'search_knowledge', 'create_context', 'update_context', 'get_context_prompt', 'learn_from_interaction', 'export_knowledge_base', 'import_knowledge_base', 'get_statistics']",
    "source": "codebase:knowledge_manager.py",
    "timestamp": "2025-09-02T13:11:39.726166",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/knowledge_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_69561ab4_20250902131139",
    "category": "api_references",
    "content": "def load_knowledge_bases(self)\nLoad all knowledge bases from disk",
    "source": "codebase:knowledge_manager.py",
    "timestamp": "2025-09-02T13:11:39.727921",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/knowledge_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9553cb06_20250902131139",
    "category": "api_references",
    "content": "def save_knowledge_base(self, agent_name)\nSave a knowledge base to disk",
    "source": "codebase:knowledge_manager.py",
    "timestamp": "2025-09-02T13:11:39.729705",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/knowledge_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_a528a395_20250902131139",
    "category": "api_references",
    "content": "def add_knowledge(self, agent_name, category, content, source, metadata)\nAdd new knowledge to an agent's knowledge base",
    "source": "codebase:knowledge_manager.py",
    "timestamp": "2025-09-02T13:11:39.731694",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/knowledge_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_e284f724_20250902131139",
    "category": "api_references",
    "content": "def search_knowledge(self, agent_name, query, category, limit)\nSearch for relevant knowledge items",
    "source": "codebase:knowledge_manager.py",
    "timestamp": "2025-09-02T13:11:39.733787",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/knowledge_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_b0eff846_20250902131139",
    "category": "api_references",
    "content": "def create_context(self, task_id, agent_id, initial_query)\nCreate a new context for a task",
    "source": "codebase:knowledge_manager.py",
    "timestamp": "2025-09-02T13:11:39.735859",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/knowledge_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_610c4dfd_20250902131139",
    "category": "api_references",
    "content": "def update_context(self, task_id, message)\nUpdate context with new conversation",
    "source": "codebase:knowledge_manager.py",
    "timestamp": "2025-09-02T13:11:39.737847",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/knowledge_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_736e6fd7_20250902131139",
    "category": "api_references",
    "content": "def get_context_prompt(self, task_id)\nGenerate a context prompt for the agent",
    "source": "codebase:knowledge_manager.py",
    "timestamp": "2025-09-02T13:11:39.740051",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/knowledge_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_e651faca_20250902131139",
    "category": "api_references",
    "content": "def learn_from_interaction(self, agent_name, task_id, interaction)\nLearn from an interaction to improve knowledge base",
    "source": "codebase:knowledge_manager.py",
    "timestamp": "2025-09-02T13:11:39.742282",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/knowledge_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_fd75a831_20250902131139",
    "category": "api_references",
    "content": "def export_knowledge_base(self, agent_name, output_file)\nExport a knowledge base to a file",
    "source": "codebase:knowledge_manager.py",
    "timestamp": "2025-09-02T13:11:39.744258",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/knowledge_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_bd0021e5_20250902131139",
    "category": "api_references",
    "content": "def import_knowledge_base(self, agent_name, input_file)\nImport knowledge from a file",
    "source": "codebase:knowledge_manager.py",
    "timestamp": "2025-09-02T13:11:39.746245",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/knowledge_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_dfaf73fa_20250902131139",
    "category": "api_references",
    "content": "def get_statistics(self, agent_name)\nGet statistics about an agent's knowledge base",
    "source": "codebase:knowledge_manager.py",
    "timestamp": "2025-09-02T13:11:39.748331",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/knowledge_manager.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d22c4d26_20250902131139",
    "category": "api_references",
    "content": "def setup_full_stack_developer()\nSet up a full-stack developer agent with comprehensive knowledge",
    "source": "codebase:setup_agents.py",
    "timestamp": "2025-09-02T13:11:39.751696",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/setup_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_4b368e66_20250902131139",
    "category": "api_references",
    "content": "def setup_data_scientist()\nSet up a data scientist agent",
    "source": "codebase:setup_agents.py",
    "timestamp": "2025-09-02T13:11:39.753731",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/setup_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_166acedc_20250902131139",
    "category": "api_references",
    "content": "def list_all_agents()\nList all configured agents",
    "source": "codebase:setup_agents.py",
    "timestamp": "2025-09-02T13:11:39.755603",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/setup_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_e8162765_20250902131139",
    "category": "api_references",
    "content": "def test_agent_knowledge(agent_name, query)\nTest an agent's knowledge retrieval",
    "source": "codebase:setup_agents.py",
    "timestamp": "2025-09-02T13:11:39.757411",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/setup_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_a84318d3_20250902131139",
    "category": "code_examples",
    "content": "Class CodebaseTrainer:\nTrain agents on custom codebases and documentation\n\nMethods: ['__init__', 'train_on_directory', '_extract_knowledge_from_file', '_extract_python_knowledge', '_extract_javascript_knowledge', '_extract_typescript_knowledge', '_extract_java_knowledge', '_extract_cpp_knowledge', '_extract_c_knowledge', '_extract_go_knowledge', '_extract_rust_knowledge', '_extract_swift_knowledge', '_extract_kotlin_knowledge', '_extract_markdown_knowledge', '_extract_rst_knowledge', '_extract_text_knowledge', '_extract_json_knowledge', '_extract_yaml_knowledge', '_extract_toml_knowledge', '_extract_html_knowledge', '_extract_css_knowledge', '_extract_scss_knowledge', '_extract_code_patterns']",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.763064",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_21ba88df_20250902131139",
    "category": "api_references",
    "content": "def main()\nExample usage",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.765060",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_09624a8d_20250902131139",
    "category": "api_references",
    "content": "def train_on_directory(self, agent_name, directory_path, recursive, file_extensions)\nTrain an agent on all files in a directory",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.766926",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_2ce32873_20250902131139",
    "category": "api_references",
    "content": "def _extract_knowledge_from_file(self, file_path)\nExtract knowledge from a single file",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.772990",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_09c8ef4b_20250902131139",
    "category": "api_references",
    "content": "def _extract_python_knowledge(self, content, file_path)\nExtract knowledge from Python files",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.775424",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_40d4553c_20250902131139",
    "category": "api_references",
    "content": "def _extract_javascript_knowledge(self, content, file_path)\nExtract knowledge from JavaScript/JSX files",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.777574",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_5aa808c6_20250902131139",
    "category": "api_references",
    "content": "def _extract_typescript_knowledge(self, content, file_path)\nExtract knowledge from TypeScript files",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.780467",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_b9293538_20250902131139",
    "category": "api_references",
    "content": "def _extract_java_knowledge(self, content, file_path)\nExtract knowledge from Java files",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.782524",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_acc7dc76_20250902131139",
    "category": "api_references",
    "content": "def _extract_cpp_knowledge(self, content, file_path)\nExtract knowledge from C++ files",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.784525",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_b4661b47_20250902131139",
    "category": "api_references",
    "content": "def _extract_c_knowledge(self, content, file_path)\nExtract knowledge from C files",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.786468",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_fb7d08c7_20250902131139",
    "category": "api_references",
    "content": "def _extract_go_knowledge(self, content, file_path)\nExtract knowledge from Go files",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.788787",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7cc4228f_20250902131139",
    "category": "api_references",
    "content": "def _extract_rust_knowledge(self, content, file_path)\nExtract knowledge from Rust files",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.790819",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9efcbd88_20250902131139",
    "category": "api_references",
    "content": "def _extract_swift_knowledge(self, content, file_path)\nExtract knowledge from Swift files",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.792813",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9e20ceae_20250902131139",
    "category": "api_references",
    "content": "def _extract_kotlin_knowledge(self, content, file_path)\nExtract knowledge from Kotlin files",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.794755",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_c2ae817e_20250902131139",
    "category": "api_references",
    "content": "def _extract_markdown_knowledge(self, content, file_path)\nExtract knowledge from Markdown files",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.796784",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_88cea7a3_20250902131139",
    "category": "api_references",
    "content": "def _extract_rst_knowledge(self, content, file_path)\nExtract knowledge from reStructuredText files",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.799135",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_8fa5d3ec_20250902131139",
    "category": "api_references",
    "content": "def _extract_text_knowledge(self, content, file_path)\nExtract knowledge from plain text files",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.801359",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_58a61422_20250902131139",
    "category": "api_references",
    "content": "def _extract_json_knowledge(self, content, file_path)\nExtract knowledge from JSON files",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.803652",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_26bd926c_20250902131139",
    "category": "api_references",
    "content": "def _extract_yaml_knowledge(self, content, file_path)\nExtract knowledge from YAML files",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.805690",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_eca8d3d7_20250902131139",
    "category": "api_references",
    "content": "def _extract_toml_knowledge(self, content, file_path)\nExtract knowledge from TOML files",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.807863",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1652bab3_20250902131139",
    "category": "api_references",
    "content": "def _extract_html_knowledge(self, content, file_path)\nExtract knowledge from HTML files",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.810302",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9a07f604_20250902131139",
    "category": "api_references",
    "content": "def _extract_css_knowledge(self, content, file_path)\nExtract knowledge from CSS files",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.813278",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9d6a6266_20250902131139",
    "category": "api_references",
    "content": "def _extract_scss_knowledge(self, content, file_path)\nExtract knowledge from SCSS files",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.815325",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_5d96c7c0_20250902131139",
    "category": "api_references",
    "content": "def _extract_code_patterns(self, content)\nExtract common code patterns from any file",
    "source": "codebase:train_agent_on_codebase.py",
    "timestamp": "2025-09-02T13:11:39.817330",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/train_agent_on_codebase.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_29340fec_20250902131139",
    "category": "code_examples",
    "content": "Class RewardType:\nTypes of rewards\n\nMethods: []",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.824499",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_5a349ba3_20250902131139",
    "category": "code_examples",
    "content": "Class RewardConfig:\nConfiguration for reward calculation\n\nMethods: []",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.826828",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_072cf397_20250902131139",
    "category": "code_examples",
    "content": "Class RewardCalculator:\nMain reward calculator for Agent Lightning\nImplements various reward functions for different task types\n\nMethods: ['__init__', 'calculate_reward', 'calculate_math_reward', 'calculate_code_reward', 'calculate_text_reward', 'calculate_qa_reward', 'calculate_rag_reward', 'calculate_tool_use_reward', 'calculate_multi_agent_reward', 'calculate_sql_reward', 'calculate_general_reward', 'apply_reward_shaping', 'extract_number', 'contains_reasoning', 'is_valid_code', 'is_valid_sql', 'code_similarity', 'run_test_cases', 'calculate_text_quality', 'calculate_accuracy', 'calculate_completeness', 'calculate_coherence', 'calculate_efficiency']",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.828911",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_9c84ef11_20250902131139",
    "category": "code_examples",
    "content": "Class HierarchicalRewardCalculator:\nHierarchical reward calculator for multi-level agent systems\nImplements credit assignment for hierarchical RL\n\nMethods: ['__init__', 'calculate_hierarchical_reward']",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.831235",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_820f405a_20250902131139",
    "category": "code_examples",
    "content": "Class CuriosityReward:\nIntrinsic curiosity reward for exploration\nEncourages agents to explore novel states\n\nMethods: ['__init__', 'calculate_curiosity_reward']",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.833568",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_57ebfb06_20250902131139",
    "category": "api_references",
    "content": "def __init__(self, config)\nInitialize reward calculator\n\nArgs:\n    config: Reward configuration",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.835862",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_b9605097_20250902131139",
    "category": "api_references",
    "content": "def calculate_reward(self, action, ground_truth, task_type, metadata)\nMain reward calculation function\n\nArgs:\n    action: Agent's action/output\n    ground_truth: Expected result\n    task_type: Type of task\n    metadata: Additional context\n    \nReturns:\n    Reward value",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.838057",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_c643aa62_20250902131139",
    "category": "api_references",
    "content": "def calculate_math_reward(self, action, ground_truth, metadata)\nCalculate reward for mathematical tasks",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.840391",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_b7193b87_20250902131139",
    "category": "api_references",
    "content": "def calculate_code_reward(self, action, ground_truth, metadata)\nCalculate reward for code generation tasks",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.843058",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d0d24ee9_20250902131139",
    "category": "api_references",
    "content": "def calculate_text_reward(self, action, ground_truth, metadata)\nCalculate reward for text generation tasks",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.845365",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_c35ac303_20250902131139",
    "category": "api_references",
    "content": "def calculate_qa_reward(self, action, ground_truth, metadata)\nCalculate reward for question answering tasks",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.847625",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9321cb19_20250902131139",
    "category": "api_references",
    "content": "def calculate_rag_reward(self, action, ground_truth, metadata)\nCalculate reward for retrieval-augmented generation",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.849901",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_fde8bd79_20250902131139",
    "category": "api_references",
    "content": "def calculate_tool_use_reward(self, action, ground_truth, metadata)\nCalculate reward for tool usage tasks",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.852360",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_3b4feada_20250902131139",
    "category": "api_references",
    "content": "def calculate_multi_agent_reward(self, action, ground_truth, metadata)\nCalculate reward for multi-agent coordination",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.854892",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7820c6eb_20250902131139",
    "category": "api_references",
    "content": "def calculate_sql_reward(self, action, ground_truth, metadata)\nCalculate reward for SQL generation tasks",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.857459",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_6a5ae2b0_20250902131139",
    "category": "api_references",
    "content": "def calculate_general_reward(self, action, ground_truth, metadata)\nGeneral reward calculation fallback",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.859743",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_86de384a_20250902131139",
    "category": "api_references",
    "content": "def apply_reward_shaping(self, base_reward, action, metadata)\nApply reward shaping for better learning",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.862714",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_61128eea_20250902131139",
    "category": "api_references",
    "content": "def extract_number(self, text)\nExtract numerical value from text",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.865840",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_fdd99d6a_20250902131139",
    "category": "api_references",
    "content": "def contains_reasoning(self, text)\nCheck if text contains reasoning steps",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.868908",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_6783e636_20250902131139",
    "category": "api_references",
    "content": "def is_valid_code(self, code)\nCheck if code is syntactically valid Python",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.871249",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_a769b130_20250902131139",
    "category": "api_references",
    "content": "def is_valid_sql(self, sql)\nBasic SQL syntax validation",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.873493",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_db46a5d4_20250902131139",
    "category": "api_references",
    "content": "def code_similarity(self, code1, code2)\nCalculate structural similarity between code snippets",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.875880",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1f2b049a_20250902131139",
    "category": "api_references",
    "content": "def run_test_cases(self, code, test_cases)\nRun test cases on code (simplified)",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.878279",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_c2344ef9_20250902131139",
    "category": "api_references",
    "content": "def calculate_text_quality(self, text, metadata)\nCalculate text quality without ground truth",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.882145",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_4b2c51c6_20250902131139",
    "category": "api_references",
    "content": "def calculate_accuracy(self, prediction, ground_truth)\nCalculate accuracy metric",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.884644",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_19144323_20250902131139",
    "category": "api_references",
    "content": "def calculate_completeness(self, response, requirements)\nCalculate completeness based on requirements",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.887034",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_3ab5af98_20250902131139",
    "category": "api_references",
    "content": "def calculate_coherence(self, text)\nCalculate text coherence (simplified)",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.889471",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_2b00cd89_20250902131139",
    "category": "api_references",
    "content": "def calculate_efficiency(self, action, metadata)\nCalculate efficiency metric",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.892361",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_e2b4b318_20250902131139",
    "category": "api_references",
    "content": "def calculate_hierarchical_reward(self, transitions, final_reward)\nAssign credit to transitions in hierarchical structure\n\nArgs:\n    transitions: List of transitions\n    final_reward: Episode final reward\n    \nReturns:\n    List of rewards for each transition",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.895827",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d4196e14_20250902131139",
    "category": "api_references",
    "content": "def calculate_curiosity_reward(self, state)\nCalculate curiosity bonus based on state novelty",
    "source": "codebase:reward_functions.py",
    "timestamp": "2025-09-02T13:11:39.900802",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/reward_functions.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_2dd9da6c_20250902131139",
    "category": "code_examples",
    "content": "Class DifficultyLevel:\nTask difficulty levels for curriculum\n\nMethods: []",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.908863",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_3a592546_20250902131139",
    "category": "code_examples",
    "content": "Class TaskCategory:\nCategories of tasks for curriculum\n\nMethods: []",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.911460",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_048592d1_20250902131139",
    "category": "code_examples",
    "content": "Class CurriculumTask:\nRepresents a task in the curriculum\n\nMethods: []",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.913801",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_aab6efdb_20250902131139",
    "category": "code_examples",
    "content": "Class LearningProgress:\nTracks agent's learning progress\n\nMethods: []",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.916398",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_b13f9d1e_20250902131139",
    "category": "code_examples",
    "content": "Class CurriculumLearning:\nMain curriculum learning system for Agent Lightning\nManages progressive task difficulty and skill development\n\nMethods: ['__init__', '_build_curriculum', 'get_next_task', '_get_available_tasks', '_select_task_strategically', '_get_task_category', 'evaluate_performance', '_should_progress', '_should_regress', '_get_next_difficulty', '_get_previous_difficulty', 'generate_curriculum_batch', '_generate_review_tasks', 'adapt_difficulty_dynamically', 'get_curriculum_report', '_get_proficiency_label', '_generate_recommendations', 'save_curriculum_state', 'load_curriculum_state']",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.918727",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_ee10868f_20250902131139",
    "category": "api_references",
    "content": "def __init__(self, initial_difficulty, progression_threshold, regression_threshold, window_size)\nInitialize curriculum learning system\n\nArgs:\n    initial_difficulty: Starting difficulty level\n    progression_threshold: Performance threshold to advance\n    regression_threshold: Performance threshold to regress\n    window_size: Window for performance averaging",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.921136",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_f984413e_20250902131139",
    "category": "api_references",
    "content": "def _build_curriculum(self)\nBuild the task curriculum with progressive difficulty",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.923616",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_b9c2162b_20250902131139",
    "category": "api_references",
    "content": "def get_next_task(self, agent_id)\nGet the next appropriate task for an agent\n\nArgs:\n    agent_id: ID of the agent\n    \nReturns:\n    Next task or None if curriculum complete",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.926858",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1d060e50_20250902131139",
    "category": "api_references",
    "content": "def _get_available_tasks(self, progress)\nGet tasks available for the agent's current level",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.929548",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_a7f64392_20250902131139",
    "category": "api_references",
    "content": "def _select_task_strategically(self, tasks, progress)\nSelect task using curriculum learning strategy",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.931934",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_4cb586b9_20250902131139",
    "category": "api_references",
    "content": "def _get_task_category(self, task_id)\nGet category of a task by ID",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.934840",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_ed384168_20250902131139",
    "category": "api_references",
    "content": "def evaluate_performance(self, agent_id, task, result)\nEvaluate agent's performance on a task\n\nArgs:\n    agent_id: ID of the agent\n    task: The completed task\n    result: Task execution result\n    \nReturns:\n    Performance score (0-1)",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.937434",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_918b8370_20250902131139",
    "category": "api_references",
    "content": "def _should_progress(self, progress)\nCheck if agent should progress to next difficulty",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.939950",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_60ff227d_20250902131139",
    "category": "api_references",
    "content": "def _should_regress(self, progress)\nCheck if agent should regress to easier difficulty",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.942424",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_482bc9b1_20250902131139",
    "category": "api_references",
    "content": "def _get_next_difficulty(self, current)\nGet next difficulty level",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.945169",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_3b4ab114_20250902131139",
    "category": "api_references",
    "content": "def _get_previous_difficulty(self, current)\nGet previous difficulty level",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.947666",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_24877a99_20250902131139",
    "category": "api_references",
    "content": "def generate_curriculum_batch(self, agent_id, batch_size)\nGenerate a batch of tasks for training\n\nArgs:\n    agent_id: ID of the agent\n    batch_size: Number of tasks to generate\n    \nReturns:\n    List of curriculum tasks",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.950128",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_94cfc292_20250902131139",
    "category": "api_references",
    "content": "def _generate_review_tasks(self, progress, num_tasks)\nGenerate review tasks from completed ones",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.952561",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_841fabfa_20250902131139",
    "category": "api_references",
    "content": "def adapt_difficulty_dynamically(self, agent_id)\nDynamically adapt difficulty based on performance",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.955429",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_69acc4e6_20250902131139",
    "category": "api_references",
    "content": "def get_curriculum_report(self, agent_id)\nGenerate curriculum progress report",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.957960",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_03d8e46c_20250902131139",
    "category": "api_references",
    "content": "def _get_proficiency_label(self, skill_level)\nConvert skill level to proficiency label",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.960459",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d57a1aa1_20250902131139",
    "category": "api_references",
    "content": "def _generate_recommendations(self, progress)\nGenerate learning recommendations",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.963120",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_e916dc13_20250902131139",
    "category": "api_references",
    "content": "def save_curriculum_state(self, filepath)\nSave curriculum state to file",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.966844",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_69d402c3_20250902131139",
    "category": "api_references",
    "content": "def load_curriculum_state(self, filepath)\nLoad curriculum state from file",
    "source": "codebase:curriculum_learning.py",
    "timestamp": "2025-09-02T13:11:39.969641",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/curriculum_learning.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_75ffd224_20250902131139",
    "category": "code_examples",
    "content": "Class PromptTemplate:\nRepresents a prompt template with variables\n\nMethods: []",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:39.980608",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_1d01d06a_20250902131139",
    "category": "code_examples",
    "content": "Class PromptVariation:\nA variation of a prompt with specific values\n\nMethods: []",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:39.983256",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_58f32ac6_20250902131139",
    "category": "code_examples",
    "content": "Class OptimizationConfig:\nConfiguration for prompt optimization\n\nMethods: []",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:39.985991",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_51f98a33_20250902131139",
    "category": "code_examples",
    "content": "Class PromptOptimizer:\nMain prompt optimization system for Agent Lightning\nUses RL and evolutionary strategies to improve prompts\n\nMethods: ['__init__', '_build_component_library', '_initialize_templates', '_define_principles', 'generate_prompt_variation', 'evaluate_prompt', '_assess_prompt_quality', 'optimize_prompt_evolutionary', '_tournament_select', '_crossover', '_mutate', '_extract_components', 'optimize_with_reinforcement_learning', '_generate_from_q_values', 'chain_of_thought_optimization', 'constitutional_refinement', 'auto_prompt_engineer', '_classify_task', 'batch_optimize', 'generate_optimization_report']",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:39.988933",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_a40e4b64_20250902131139",
    "category": "api_references",
    "content": "def __init__(self, config)\nInitialize prompt optimizer\n\nArgs:\n    config: Optimization configuration",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:39.991670",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_00684db5_20250902131139",
    "category": "api_references",
    "content": "def _build_component_library(self)\nBuild library of prompt components",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:39.994241",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_f3c826f4_20250902131139",
    "category": "api_references",
    "content": "def _initialize_templates(self)\nInitialize base prompt templates",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:39.997177",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1e7f1e3a_20250902131140",
    "category": "api_references",
    "content": "def _define_principles(self)\nDefine constitutional principles for prompt improvement",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:40.000094",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_33e676ed_20250902131140",
    "category": "api_references",
    "content": "def generate_prompt_variation(self, template)\nGenerate a variation of a prompt template\n\nArgs:\n    template: Base template to vary\n    \nReturns:\n    Prompt variation",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:40.002806",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_59c0a5f1_20250902131140",
    "category": "api_references",
    "content": "def evaluate_prompt(self, prompt, task, agent)\nEvaluate a prompt's performance on a task\n\nArgs:\n    prompt: Prompt to evaluate\n    task: Task to perform\n    agent: Agent to use (optional)\n    \nReturns:\n    Performance score",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:40.005645",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9340060a_20250902131140",
    "category": "api_references",
    "content": "def _assess_prompt_quality(self, prompt)\nAssess intrinsic quality of a prompt",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:40.008526",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_09cd2991_20250902131140",
    "category": "api_references",
    "content": "def optimize_prompt_evolutionary(self, template, tasks)\nOptimize prompt using evolutionary algorithm\n\nArgs:\n    template: Base template to optimize\n    tasks: Tasks to optimize for\n    \nReturns:\n    Best prompt variation",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:40.011200",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_6ab832e4_20250902131140",
    "category": "api_references",
    "content": "def _tournament_select(self, population, tournament_size)\nTournament selection",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:40.013815",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_f19bce83_20250902131140",
    "category": "api_references",
    "content": "def _crossover(self, parent1, parent2, template)\nCrossover two prompt variations",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:40.016384",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_0285c104_20250902131140",
    "category": "api_references",
    "content": "def _mutate(self, variation, template)\nMutate a prompt variation",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:40.018975",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_dd455a67_20250902131140",
    "category": "api_references",
    "content": "def _extract_components(self, prompt)\nExtract components from a prompt",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:40.021690",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_10f488ff_20250902131140",
    "category": "api_references",
    "content": "def optimize_with_reinforcement_learning(self, template, tasks, num_iterations)\nOptimize prompt using reinforcement learning\n\nArgs:\n    template: Base template\n    tasks: Tasks to optimize for\n    num_iterations: Number of RL iterations\n    \nReturns:\n    Optimized prompt variation",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:40.024289",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_bfce5ec2_20250902131140",
    "category": "api_references",
    "content": "def _generate_from_q_values(self, template, q_values)\nGenerate variation using Q-values",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:40.026908",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_36920f39_20250902131140",
    "category": "api_references",
    "content": "def chain_of_thought_optimization(self, base_prompt, task)\nOptimize prompt by adding chain-of-thought reasoning\n\nArgs:\n    base_prompt: Original prompt\n    task: Task to optimize for\n    \nReturns:\n    Optimized prompt with CoT",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:40.030127",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_54150521_20250902131140",
    "category": "api_references",
    "content": "def constitutional_refinement(self, prompt)\nRefine prompt using constitutional AI principles\n\nArgs:\n    prompt: Prompt to refine\n    \nReturns:\n    Refined prompt",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:40.032809",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_492dabc8_20250902131140",
    "category": "api_references",
    "content": "def auto_prompt_engineer(self, task_description, examples)\nAutomatically engineer a prompt for a task\n\nArgs:\n    task_description: Description of the task\n    examples: Optional examples\n    \nReturns:\n    Engineered prompt",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:40.035463",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_3bc72c72_20250902131140",
    "category": "api_references",
    "content": "def _classify_task(self, description)\nClassify task type from description",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:40.038349",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_2c3989fe_20250902131140",
    "category": "api_references",
    "content": "def batch_optimize(self, tasks)\nOptimize prompts for multiple task types\n\nArgs:\n    tasks: List of tasks\n    \nReturns:\n    Dictionary of optimized prompts by category",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:40.041357",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7e76ed28_20250902131140",
    "category": "api_references",
    "content": "def generate_optimization_report(self)\nGenerate comprehensive optimization report",
    "source": "codebase:prompt_optimization.py",
    "timestamp": "2025-09-02T13:11:40.044449",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/prompt_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1c178fe0_20250902131140",
    "category": "api_references",
    "content": "def create_mobile_developer()\nCreate a mobile development specialist",
    "source": "codebase:specialized_agents.py",
    "timestamp": "2025-09-02T13:11:40.049412",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/specialized_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_dc5f27dc_20250902131140",
    "category": "api_references",
    "content": "def create_security_expert()\nCreate a cybersecurity specialist",
    "source": "codebase:specialized_agents.py",
    "timestamp": "2025-09-02T13:11:40.052412",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/specialized_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1f998f5a_20250902131140",
    "category": "api_references",
    "content": "def create_devops_engineer()\nCreate a DevOps/Infrastructure specialist",
    "source": "codebase:specialized_agents.py",
    "timestamp": "2025-09-02T13:11:40.055303",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/specialized_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_27c99fa1_20250902131140",
    "category": "api_references",
    "content": "def create_ui_ux_designer()\nCreate a UI/UX design specialist",
    "source": "codebase:specialized_agents.py",
    "timestamp": "2025-09-02T13:11:40.059983",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/specialized_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_ec8e0cb6_20250902131140",
    "category": "api_references",
    "content": "def create_blockchain_developer()\nCreate a blockchain/Web3 specialist",
    "source": "codebase:specialized_agents.py",
    "timestamp": "2025-09-02T13:11:40.063075",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/specialized_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d42c6941_20250902131140",
    "category": "api_references",
    "content": "def setup_all_specialized_agents()\nSet up all specialized agents with their knowledge bases",
    "source": "codebase:specialized_agents.py",
    "timestamp": "2025-09-02T13:11:40.065862",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/specialized_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_495e2e69_20250902131140",
    "category": "code_examples",
    "content": "Class MultiAgentSystem:\nMulti-agent system with specialized roles following Agent Lightning architecture\nSupports cooperative and competitive agent interactions\n\nMethods: ['__init__', '_initialize_agents', 'orchestrate', '_execute_research_phase', '_execute_writing_phase', '_execute_review_phase', '_execute_optimization_phase', '_needs_optimization', '_extract_quality_score', '_calculate_shared_reward', '_broadcast_to_agents', 'get_training_batch', 'reset']",
    "source": "codebase:multi_agent_system.py",
    "timestamp": "2025-09-02T13:11:40.071997",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/multi_agent_system.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_65d59493_20250902131140",
    "category": "api_references",
    "content": "def __init__(self, coordination_type)\nInitialize multi-agent system\n\nArgs:\n    coordination_type: \"cooperative\" or \"competitive\"",
    "source": "codebase:multi_agent_system.py",
    "timestamp": "2025-09-02T13:11:40.074884",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/multi_agent_system.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_2193e5b4_20250902131140",
    "category": "api_references",
    "content": "def _initialize_agents(self)\nInitialize specialized agents with different capabilities\nFollowing Agent Lightning's multi-agent examples",
    "source": "codebase:multi_agent_system.py",
    "timestamp": "2025-09-02T13:11:40.077619",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/multi_agent_system.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_f6719622_20250902131140",
    "category": "api_references",
    "content": "def orchestrate(self, task)\nOrchestrate multi-agent collaboration for a task\nReturns final result and all transitions for RL training\n\nThis follows Agent Lightning's approach where:\n- Each agent generates transitions\n- Transitions are collected for training\n- Rewards can be shared or individual",
    "source": "codebase:multi_agent_system.py",
    "timestamp": "2025-09-02T13:11:40.080766",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/multi_agent_system.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_dae2ece2_20250902131140",
    "category": "api_references",
    "content": "def _execute_research_phase(self, task)\nExecute research phase with researcher agent",
    "source": "codebase:multi_agent_system.py",
    "timestamp": "2025-09-02T13:11:40.083871",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/multi_agent_system.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_dca0cca9_20250902131140",
    "category": "api_references",
    "content": "def _execute_writing_phase(self)\nExecute writing phase based on research",
    "source": "codebase:multi_agent_system.py",
    "timestamp": "2025-09-02T13:11:40.086725",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/multi_agent_system.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d5429f76_20250902131140",
    "category": "api_references",
    "content": "def _execute_review_phase(self)\nExecute review phase to evaluate quality",
    "source": "codebase:multi_agent_system.py",
    "timestamp": "2025-09-02T13:11:40.089857",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/multi_agent_system.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_00009de3_20250902131140",
    "category": "api_references",
    "content": "def _execute_optimization_phase(self)\nExecute optimization phase if needed",
    "source": "codebase:multi_agent_system.py",
    "timestamp": "2025-09-02T13:11:40.093323",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/multi_agent_system.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_3bb8359f_20250902131140",
    "category": "api_references",
    "content": "def _needs_optimization(self)\nDetermine if optimization phase is needed",
    "source": "codebase:multi_agent_system.py",
    "timestamp": "2025-09-02T13:11:40.096356",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/multi_agent_system.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1bc0a628_20250902131140",
    "category": "api_references",
    "content": "def _extract_quality_score(self, review_content)\nExtract quality score from review content",
    "source": "codebase:multi_agent_system.py",
    "timestamp": "2025-09-02T13:11:40.101738",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/multi_agent_system.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_30f2105d_20250902131140",
    "category": "api_references",
    "content": "def _calculate_shared_reward(self)\nCalculate shared reward for cooperative multi-agent system\nFollowing Agent Lightning's MARL approach",
    "source": "codebase:multi_agent_system.py",
    "timestamp": "2025-09-02T13:11:40.104839",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/multi_agent_system.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_59b7e6cb_20250902131140",
    "category": "api_references",
    "content": "def _broadcast_to_agents(self, sender, message)\nBroadcast message from one agent to others\nEnables inter-agent communication",
    "source": "codebase:multi_agent_system.py",
    "timestamp": "2025-09-02T13:11:40.108335",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/multi_agent_system.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_b0436bdf_20250902131140",
    "category": "api_references",
    "content": "def get_training_batch(self, batch_size)\nGet a batch of transitions for training\nFollowing Agent Lightning's batch processing approach",
    "source": "codebase:multi_agent_system.py",
    "timestamp": "2025-09-02T13:11:40.111433",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/multi_agent_system.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_6d5bee9e_20250902131140",
    "category": "api_references",
    "content": "def reset(self)\nReset the multi-agent system for new episode",
    "source": "codebase:multi_agent_system.py",
    "timestamp": "2025-09-02T13:11:40.114467",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/multi_agent_system.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_59eb12c1_20250902131140",
    "category": "code_examples",
    "content": "Class AgentState:\nState representation for MDP following Agent Lightning's unified data interface\nState is a snapshot of agent execution including semantic variables\n\nMethods: ['to_dict']",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.121711",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_70bc5de7_20250902131140",
    "category": "code_examples",
    "content": "Class AgentAction:\nAction representation - entire token sequence from single LLM invocation\nFollowing Agent Lightning's approach where one action = one LLM call output\n\nMethods: ['to_dict']",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.124730",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_a869ed67_20250902131140",
    "category": "code_examples",
    "content": "Class MDPTransition:\nTransition representation for RL training\nEach transition contains (state, action, reward, next_state)\n\nMethods: ['to_dict']",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.127564",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_3d0a3e19_20250902131140",
    "category": "code_examples",
    "content": "Class MDPAgent:\nAgent modeled as Partially Observable MDP following Agent Lightning framework\nHandles state transitions, action generation, and reward computation\n\nMethods: ['__init__', '_init_llm_clients', 'observe', 'act', '_build_context_aware_prompt', '_generate_action', '_generate_openai_action', '_generate_anthropic_action', '_generate_mock_action', '_estimate_confidence', '_classify_action_type', '_compute_next_state', '_compute_reward', '_is_terminal_state', '_retrieve_relevant_memories', '_update_memory', 'update_q_values', '_state_to_key', 'reset_episode']",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.130641",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_b9417f75_20250902131140",
    "category": "api_references",
    "content": "def create_transition_batch(transitions)\nCreate a batch of transitions for training\nFollowing Agent Lightning's approach to batch processing",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.133708",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_e36501c4_20250902131140",
    "category": "api_references",
    "content": "def to_dict(self)\nConvert state to dictionary for serialization",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.136592",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_455402c5_20250902131140",
    "category": "api_references",
    "content": "def to_dict(self)\nConvert action to dictionary",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.139471",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_e836b041_20250902131140",
    "category": "api_references",
    "content": "def to_dict(self)\nConvert transition to dictionary for training",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.142872",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_06f07794_20250902131140",
    "category": "api_references",
    "content": "def __init__(self, role, model, hierarchy_level, agent_type)\nInitialize MDP Agent\n\nArgs:\n    role: Agent's role defining its behavior\n    model: LLM model to use (gpt-4o, claude-3-opus, etc.)\n    hierarchy_level: \"high\" for planning, \"low\" for execution\n    agent_type: Type of agent (researcher, writer, reviewer, optimizer)",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.146371",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_f16767c9_20250902131140",
    "category": "api_references",
    "content": "def _init_llm_clients(self)\nInitialize LLM clients based on available API keys",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.149244",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_72a628a4_20250902131140",
    "category": "api_references",
    "content": "def observe(self, execution_state)\nCreate observation (state) from current execution context\nMaps execution state to agent's observation space",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.152652",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_80f84c78_20250902131140",
    "category": "api_references",
    "content": "def act(self, state)\nGenerate action based on current state\nReturns both the action and the transition for RL training\n\nThis follows Agent Lightning's approach where:\n- Input (observation) is part of the state\n- Output (entire LLM response) is the action\n- Transition captures the state change",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.156010",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_dd046c69_20250902131140",
    "category": "api_references",
    "content": "def _build_context_aware_prompt(self, state)\nBuild context-aware prompt incorporating state information\nFollowing Agent Lightning's flexible context construction",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.158999",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_2fc39e0e_20250902131140",
    "category": "api_references",
    "content": "def _generate_action(self, prompt, state)\nGenerate action using LLM based on model type\nReturns action content and confidence score",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.161939",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_3e1c5082_20250902131140",
    "category": "api_references",
    "content": "def _generate_openai_action(self, prompt, state)\nGenerate action using OpenAI model",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.165236",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_95af1130_20250902131140",
    "category": "api_references",
    "content": "def _generate_anthropic_action(self, prompt, state)\nGenerate action using Anthropic model",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.168607",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1192bf37_20250902131140",
    "category": "api_references",
    "content": "def _generate_mock_action(self, prompt, state)\nMock action generation for testing",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.171826",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_288ef0c4_20250902131140",
    "category": "api_references",
    "content": "def _estimate_confidence(self, action_content, state)\nEstimate confidence score for generated action\nUsed for credit assignment in hierarchical RL",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.175238",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_602ebfa7_20250902131140",
    "category": "api_references",
    "content": "def _classify_action_type(self, action_content, state)\nClassify the type of action based on content and state",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.178639",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_ead13a02_20250902131140",
    "category": "api_references",
    "content": "def _compute_next_state(self, state, action)\nCompute next state after action execution\nIn practice, this would involve environment feedback",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.181866",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_145aed48_20250902131140",
    "category": "api_references",
    "content": "def _compute_reward(self, state, action, next_state)\nCompute immediate reward for the transition\nCan be sparse (only at episode end) or shaped (intermediate rewards)",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.185134",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_c259b384_20250902131140",
    "category": "api_references",
    "content": "def _is_terminal_state(self, state)\nCheck if state is terminal (episode complete)",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.188320",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_467a3499_20250902131140",
    "category": "api_references",
    "content": "def _retrieve_relevant_memories(self, query, k)\nRetrieve k most relevant memories for current context\nSimple implementation - could use embeddings for similarity",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.191299",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_8c4706be_20250902131140",
    "category": "api_references",
    "content": "def _update_memory(self, state, action, reward)\nUpdate agent's memory with new experience",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.194236",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_940b2134_20250902131140",
    "category": "api_references",
    "content": "def update_q_values(self, transition)\nUpdate Q-values using the transition (for RL training)\nImplements basic Q-learning update",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.197179",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_af3a82c2_20250902131140",
    "category": "api_references",
    "content": "def _state_to_key(self, state)\nConvert state to string key for value storage",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.200627",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_50d2d8bf_20250902131140",
    "category": "api_references",
    "content": "def reset_episode(self)\nReset for new episode",
    "source": "codebase:mdp_agents.py",
    "timestamp": "2025-09-02T13:11:40.203678",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/mdp_agents.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_d2415740_20250902131140",
    "category": "code_examples",
    "content": "Class OptimizationTarget:\nTargets for selective optimization\n\nMethods: []",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.213638",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_427ac4c8_20250902131140",
    "category": "code_examples",
    "content": "Class CapabilityArea:\nAgent capability areas\n\nMethods: []",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.216771",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_62c86eea_20250902131140",
    "category": "code_examples",
    "content": "Class OptimizationProfile:\nProfile for selective optimization\n\nMethods: []",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.220157",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_02c29e89_20250902131140",
    "category": "code_examples",
    "content": "Class OptimizationResult:\nResult of selective optimization\n\nMethods: []",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.223565",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_feafbe2f_20250902131140",
    "category": "code_examples",
    "content": "Class SelectiveOptimizer:\nMain selective optimization system for Agent Lightning\nProvides targeted improvements for specific agent capabilities\n\nMethods: ['__init__', '_initialize_strategies', 'analyze_agent', '_run_capability_tests', '_test_capability', '_generate_recommendations', 'create_optimization_profile', 'optimize_agent', '_optimize_for_accuracy', '_optimize_for_speed', '_optimize_for_robustness', '_optimize_for_generalization', '_optimize_for_efficiency', '_optimize_for_specialization', '_generate_accuracy_training_data', '_generate_speed_training_data', '_generate_adversarial_examples', '_generate_diverse_tasks', '_generate_efficiency_training_data', '_generate_specialized_data', '_add_noise', '_evaluate_robustness', '_evaluate_generalization', '_evaluate_efficiency', '_batch_tasks', 'compare_optimizations', 'generate_optimization_report']",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.226590",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_3bfd3d45_20250902131140",
    "category": "api_references",
    "content": "def __init__(self)\nInitialize selective optimizer",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.229963",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_5a95528d_20250902131140",
    "category": "api_references",
    "content": "def _initialize_strategies(self)\nInitialize optimization strategies",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.233297",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_28b5e7d1_20250902131140",
    "category": "api_references",
    "content": "def analyze_agent(self, agent)\nAnalyze agent's current capabilities and weaknesses\n\nArgs:\n    agent: Agent to analyze\n    \nReturns:\n    Analysis results",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.236543",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_ee518e1e_20250902131140",
    "category": "api_references",
    "content": "def _run_capability_tests(self, agent)\nRun capability tests on agent",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.239961",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_8b2d4d3e_20250902131140",
    "category": "api_references",
    "content": "def _test_capability(self, agent, tasks, task_type)\nTest agent on specific capability",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.243402",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_8c0aab6e_20250902131140",
    "category": "api_references",
    "content": "def _generate_recommendations(self, analysis)\nGenerate optimization recommendations",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.246813",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_f3b769cc_20250902131140",
    "category": "api_references",
    "content": "def create_optimization_profile(self, agent_id, target, capability_areas, target_improvement)\nCreate optimization profile for an agent\n\nArgs:\n    agent_id: ID of agent to optimize\n    target: Optimization target\n    capability_areas: Areas to focus on\n    target_improvement: Target improvement percentage\n    \nReturns:\n    Optimization profile",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.250121",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_73a70b50_20250902131140",
    "category": "api_references",
    "content": "def optimize_agent(self, agent, profile, num_iterations)\nOptimize agent according to profile\n\nArgs:\n    agent: Agent to optimize\n    profile: Optimization profile\n    num_iterations: Number of optimization iterations\n    \nReturns:\n    Optimization result",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.253608",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_8b4cc290_20250902131140",
    "category": "api_references",
    "content": "def _optimize_for_accuracy(self, agent, profile, num_iterations)\nOptimize agent for accuracy",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.256899",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_761515d3_20250902131140",
    "category": "api_references",
    "content": "def _optimize_for_speed(self, agent, profile, num_iterations)\nOptimize agent for speed",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.260201",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_303df8e0_20250902131140",
    "category": "api_references",
    "content": "def _optimize_for_robustness(self, agent, profile, num_iterations)\nOptimize agent for robustness",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.263785",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_fca05bae_20250902131140",
    "category": "api_references",
    "content": "def _optimize_for_generalization(self, agent, profile, num_iterations)\nOptimize agent for generalization",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.267157",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_5e13c4e0_20250902131140",
    "category": "api_references",
    "content": "def _optimize_for_efficiency(self, agent, profile, num_iterations)\nOptimize agent for efficiency",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.270566",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_8e120aaf_20250902131140",
    "category": "api_references",
    "content": "def _optimize_for_specialization(self, agent, profile, num_iterations)\nOptimize agent for specialization",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.273999",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_81f3bb05_20250902131140",
    "category": "api_references",
    "content": "def _generate_accuracy_training_data(self, areas)\nGenerate training data for accuracy optimization",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.277331",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7e002604_20250902131140",
    "category": "api_references",
    "content": "def _generate_speed_training_data(self, areas)\nGenerate training data for speed optimization",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.280867",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9d27488f_20250902131140",
    "category": "api_references",
    "content": "def _generate_adversarial_examples(self, areas)\nGenerate adversarial examples for robustness",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.284508",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d83090e8_20250902131140",
    "category": "api_references",
    "content": "def _generate_diverse_tasks(self, areas)\nGenerate diverse tasks for generalization",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.287849",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_ff29a31f_20250902131140",
    "category": "api_references",
    "content": "def _generate_efficiency_training_data(self, areas)\nGenerate training data for efficiency optimization",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.291478",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7340b294_20250902131140",
    "category": "api_references",
    "content": "def _generate_specialized_data(self, capability)\nGenerate specialized training data",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.295462",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_97f15367_20250902131140",
    "category": "api_references",
    "content": "def _add_noise(self, text, noise_level)\nAdd noise to text for robustness testing",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.299107",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d4f511a2_20250902131140",
    "category": "api_references",
    "content": "def _evaluate_robustness(self, output, ground_truth, noise_level)\nEvaluate robustness of output",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.302781",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_db7fbbb7_20250902131140",
    "category": "api_references",
    "content": "def _evaluate_generalization(self, agent, task, num_variations)\nEvaluate generalization capability",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.306733",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_78a1ed0e_20250902131140",
    "category": "api_references",
    "content": "def _evaluate_efficiency(self, output, ground_truth, transition)\nEvaluate efficiency of solution",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.310587",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_669a14b8_20250902131140",
    "category": "api_references",
    "content": "def _batch_tasks(self, tasks, batch_size)\nBatch tasks for processing",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.315193",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_27d05cf2_20250902131140",
    "category": "api_references",
    "content": "def compare_optimizations(self, results)\nCompare multiple optimization results",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.321430",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7e76ed28_20250902131140",
    "category": "api_references",
    "content": "def generate_optimization_report(self)\nGenerate comprehensive optimization report",
    "source": "codebase:selective_optimization.py",
    "timestamp": "2025-09-02T13:11:40.325016",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/selective_optimization.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_9d4ab757_20250902131140",
    "category": "technical_documentation",
    "content": "- always check the current implementation to start from after finishing a task:\n- always read the pdf in the project folder first before starting a task to get a better understanding of what we try to build\n- always read the todo Resources & Documentation section before you start working on a task\n- always read ai agent.docx before start working on a task",
    "source": "codebase:CLAUDE.md",
    "timestamp": "2025-09-02T13:11:40.330190",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/CLAUDE.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_bdfc717b_20250902131140",
    "category": "api_references",
    "content": "def setup_hierarchical_rl_server()\nConfigure the Lightning Server for hierarchical RL training",
    "source": "codebase:lightning_server_rl.py",
    "timestamp": "2025-09-02T13:11:40.334921",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/lightning_server_rl.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_74c91f1c_20250902131140",
    "category": "api_references",
    "content": "def start_server()\nStart the Lightning Server",
    "source": "codebase:lightning_server_rl.py",
    "timestamp": "2025-09-02T13:11:40.338975",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/lightning_server_rl.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_a267605a_20250902131140",
    "category": "technical_documentation",
    "content": "Security:\n\nMicrosoft takes the security of our software products and services seriously, which\nincludes all source code repositories in our GitHub organizations.",
    "source": "codebase:SECURITY.md",
    "timestamp": "2025-09-02T13:11:40.342894",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/SECURITY.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_53fc64d8_20250902131140",
    "category": "code_examples",
    "content": "Class TrainingDatasetCreator:\nCreates diverse training datasets for multi-agent RL training\n\nMethods: ['__init__', 'create_comprehensive_dataset', 'generate_math_tasks', 'generate_text_tasks', 'generate_code_tasks', 'generate_multi_agent_tasks', 'generate_rag_tasks', 'generate_tool_use_tasks', 'create_specialized_dataset', 'load_dataset', 'get_dataset_statistics']",
    "source": "codebase:create_training_dataset.py",
    "timestamp": "2025-09-02T13:11:40.351067",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/create_training_dataset.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_e24814a7_20250902131140",
    "category": "api_references",
    "content": "def __init__(self, output_dir)\nInitialize dataset creator",
    "source": "codebase:create_training_dataset.py",
    "timestamp": "2025-09-02T13:11:40.355212",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/create_training_dataset.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d4757fa9_20250902131140",
    "category": "api_references",
    "content": "def create_comprehensive_dataset(self, samples_per_type)\nCreate a comprehensive training dataset with multiple task types\nFollowing Agent Lightning's approach to diverse task training",
    "source": "codebase:create_training_dataset.py",
    "timestamp": "2025-09-02T13:11:40.358747",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/create_training_dataset.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_be773416_20250902131140",
    "category": "api_references",
    "content": "def generate_math_tasks(self, n)\nGenerate mathematical reasoning tasks with hierarchical structure",
    "source": "codebase:create_training_dataset.py",
    "timestamp": "2025-09-02T13:11:40.362106",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/create_training_dataset.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1c946f87_20250902131140",
    "category": "api_references",
    "content": "def generate_text_tasks(self, n)\nGenerate text generation and summarization tasks",
    "source": "codebase:create_training_dataset.py",
    "timestamp": "2025-09-02T13:11:40.366136",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/create_training_dataset.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_0a94bade_20250902131140",
    "category": "api_references",
    "content": "def generate_code_tasks(self, n)\nGenerate code generation and debugging tasks",
    "source": "codebase:create_training_dataset.py",
    "timestamp": "2025-09-02T13:11:40.369764",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/create_training_dataset.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_4342a6d9_20250902131140",
    "category": "api_references",
    "content": "def generate_multi_agent_tasks(self, n)\nGenerate tasks requiring multi-agent collaboration",
    "source": "codebase:create_training_dataset.py",
    "timestamp": "2025-09-02T13:11:40.373520",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/create_training_dataset.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_93a5ae32_20250902131140",
    "category": "api_references",
    "content": "def generate_rag_tasks(self, n)\nGenerate retrieval-augmented generation tasks",
    "source": "codebase:create_training_dataset.py",
    "timestamp": "2025-09-02T13:11:40.377321",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/create_training_dataset.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1f5d3da0_20250902131140",
    "category": "api_references",
    "content": "def generate_tool_use_tasks(self, n)\nGenerate tasks requiring tool usage",
    "source": "codebase:create_training_dataset.py",
    "timestamp": "2025-09-02T13:11:40.380963",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/create_training_dataset.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7128171a_20250902131140",
    "category": "api_references",
    "content": "def create_specialized_dataset(self, task_type, n_samples)\nCreate a specialized dataset for a specific task type",
    "source": "codebase:create_training_dataset.py",
    "timestamp": "2025-09-02T13:11:40.384653",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/create_training_dataset.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_b52bd566_20250902131140",
    "category": "api_references",
    "content": "def load_dataset(self, file_path)\nLoad a JSONL dataset",
    "source": "codebase:create_training_dataset.py",
    "timestamp": "2025-09-02T13:11:40.388440",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/create_training_dataset.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_cebeeb7a_20250902131140",
    "category": "api_references",
    "content": "def get_dataset_statistics(self, file_path)\nGet statistics about a dataset",
    "source": "codebase:create_training_dataset.py",
    "timestamp": "2025-09-02T13:11:40.392229",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/create_training_dataset.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_e6a1e11b_20250902131140",
    "category": "code_examples",
    "content": "Class AgentSpan:\nRepresents a span in agent execution trace\n\nMethods: []",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.399836",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_228b1cd8_20250902131140",
    "category": "code_examples",
    "content": "Class AgentLightningObservability:\nComprehensive observability for Agent Lightning\nProvides tracing, metrics, and logging for agent execution\n\nMethods: ['__init__', '_setup_tracing', '_setup_metrics', '_setup_logging', '_init_agent_metrics', 'trace_agent_execution', 'trace_llm_call', 'trace_memory_operation', 'record_transition', 'record_training_metrics', 'create_span_decorator']",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.403795",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_b6924c0a_20250902131140",
    "category": "code_examples",
    "content": "Class TraceCollector:\nCollects and aggregates traces for Agent Lightning\nUsed for creating training data from execution traces\n\nMethods: ['__init__', 'start_trace', 'add_span', 'end_trace', 'get_trace_data', 'export_traces']",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.407905",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_1d96d5f3_20250902131140",
    "category": "code_examples",
    "content": "Class MetricsAggregator:\nAggregates metrics for monitoring dashboard\n\nMethods: ['__init__', 'add_metric', 'aggregate']",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.411631",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_8b3916b5_20250902131140",
    "category": "code_examples",
    "content": "Class ObservableAgent:\nWrapper to make agents observable\n\nMethods: ['__init__', 'act']",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.415182",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7153315f_20250902131140",
    "category": "api_references",
    "content": "def __init__(self, service_name, service_version, otlp_endpoint, prometheus_port, enable_console_export)\nInitialize observability\n\nArgs:\n    service_name: Name of the service\n    service_version: Version of the service\n    otlp_endpoint: OTLP collector endpoint\n    prometheus_port: Port for Prometheus metrics\n    enable_console_export: Enable console span export for debugging",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.419022",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9070b0fc_20250902131140",
    "category": "api_references",
    "content": "def _setup_tracing(self, otlp_endpoint, enable_console)\nSetup distributed tracing",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.422891",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_52277d6a_20250902131140",
    "category": "api_references",
    "content": "def _setup_metrics(self, prometheus_port)\nSetup metrics collection",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.426622",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_ed23be88_20250902131140",
    "category": "api_references",
    "content": "def _setup_logging(self)\nSetup structured logging",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.430500",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_743e36e7_20250902131140",
    "category": "api_references",
    "content": "def _init_agent_metrics(self)\nInitialize agent-specific metrics",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.434210",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_e1e904fc_20250902131140",
    "category": "api_references",
    "content": "def trace_agent_execution(self, agent_id, task_type)\nContext manager for tracing agent execution\n\nArgs:\n    agent_id: ID of the agent\n    task_type: Type of task being executed",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.438283",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d2714df4_20250902131140",
    "category": "api_references",
    "content": "def trace_llm_call(self, model, prompt_tokens, completion_tokens)\nTrace LLM API call\n\nArgs:\n    model: LLM model name\n    prompt_tokens: Number of prompt tokens\n    completion_tokens: Number of completion tokens",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.442384",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_552bd68c_20250902131140",
    "category": "api_references",
    "content": "def trace_memory_operation(self, operation, memory_type, size)\nTrace memory operation\n\nArgs:\n    operation: Type of operation (store, retrieve, consolidate)\n    memory_type: Type of memory (episodic, semantic, working)\n    size: Size of data",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.446225",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_805a0b1a_20250902131140",
    "category": "api_references",
    "content": "def record_transition(self, transition)\nRecord MDP transition metrics\n\nArgs:\n    transition: Transition data",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.450301",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_ebd9a614_20250902131140",
    "category": "api_references",
    "content": "def record_training_metrics(self, metrics)\nRecord training metrics\n\nArgs:\n    metrics: Dictionary of training metrics",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.454271",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_b662c2b8_20250902131140",
    "category": "api_references",
    "content": "def create_span_decorator(self, span_name)\nCreate a decorator for tracing functions\n\nArgs:\n    span_name: Name of the span",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.457889",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_5416fcd4_20250902131140",
    "category": "api_references",
    "content": "def start_trace(self, trace_id, metadata)\nStart a new trace collection",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.461988",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_0df22c1c_20250902131140",
    "category": "api_references",
    "content": "def add_span(self, span)\nAdd a span to current trace",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.465566",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_ed0ea9f1_20250902131140",
    "category": "api_references",
    "content": "def end_trace(self, trace_id)\nEnd trace collection",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.469515",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_088fb736_20250902131140",
    "category": "api_references",
    "content": "def get_trace_data(self, trace_id)\nGet trace data for training",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.473472",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_f92ea724_20250902131140",
    "category": "api_references",
    "content": "def export_traces(self, format)\nExport collected traces",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.477393",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9ba5278d_20250902131140",
    "category": "api_references",
    "content": "def add_metric(self, name, value, labels)\nAdd a metric to buffer",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.481724",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_64090d91_20250902131140",
    "category": "api_references",
    "content": "def aggregate(self, window_seconds)\nAggregate metrics over time window",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.485845",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1f634e35_20250902131140",
    "category": "api_references",
    "content": "def act(self, state)\nObservable agent action",
    "source": "codebase:observability_setup.py",
    "timestamp": "2025-09-02T13:11:40.489792",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/observability_setup.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_acf60eee_20250902131140",
    "category": "code_examples",
    "content": "Class MockOpenAICompatibleServer:\nA mock server that mimics the OpenAI Chat Completions API for testing purposes.\nIt provides deterministic, canned responses based on the content of the prompt.\nNow supports replaying from prompt caches.\n\nMethods: ['__init__', '_load_prompt_caches', '_find_best_cache_match', '_setup_routes']",
    "source": "codebase:test_tracer.py",
    "timestamp": "2025-09-02T13:11:40.499705",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_tracer.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_e6426958_20250902131140",
    "category": "api_references",
    "content": "def agent_pure_openai()\nA simple agent using the `openai` library.",
    "source": "codebase:test_tracer.py",
    "timestamp": "2025-09-02T13:11:40.503455",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_tracer.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_985eb14f_20250902131140",
    "category": "api_references",
    "content": "def agent_litellm()\nAgent using `litellm` to call the mock server.",
    "source": "codebase:test_tracer.py",
    "timestamp": "2025-09-02T13:11:40.507644",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_tracer.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_77d91e62_20250902131140",
    "category": "api_references",
    "content": "def agent_langchain()\nA simple LangChain agent.",
    "source": "codebase:test_tracer.py",
    "timestamp": "2025-09-02T13:11:40.511562",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_tracer.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_3230a82c_20250902131140",
    "category": "api_references",
    "content": "def agent_langchain_tooluse()\nA LangChain agent that uses a calculator tool.",
    "source": "codebase:test_tracer.py",
    "timestamp": "2025-09-02T13:11:40.515183",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_tracer.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_0b2714c2_20250902131140",
    "category": "api_references",
    "content": "def agent_langgraph()\nAn agent built with LangGraph for stateful, cyclical workflows.",
    "source": "codebase:test_tracer.py",
    "timestamp": "2025-09-02T13:11:40.519383",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_tracer.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d4aec900_20250902131140",
    "category": "api_references",
    "content": "def assert_expected_pairs_in_tree(root_tuple, expected_pairs)\nAssert that every (ancestor_name, child_name) pair in `expected_pairs`\noccurs somewhere in the tree produced by TraceTree.names_tuple().",
    "source": "codebase:test_tracer.py",
    "timestamp": "2025-09-02T13:11:40.523369",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_tracer.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d66f521d_20250902131140",
    "category": "api_references",
    "content": "def create_prompt_caches()\nCreate prompt caches for the agent frameworks.\nThis should only be run once to populate the caches.",
    "source": "codebase:test_tracer.py",
    "timestamp": "2025-09-02T13:11:40.527398",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_tracer.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9829e8f9_20250902131140",
    "category": "api_references",
    "content": "def _debug_with_agentops()\nThis function is for debugging purposes only.",
    "source": "codebase:test_tracer.py",
    "timestamp": "2025-09-02T13:11:40.531469",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_tracer.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_f96f7fd0_20250902131140",
    "category": "api_references",
    "content": "def _find_best_cache_match(self, request_dict)\nFind the cached request with the highest similarity to the incoming request.\nReturns (response, similarity_score) or (None, 0.0) if not found.",
    "source": "codebase:test_tracer.py",
    "timestamp": "2025-09-02T13:11:40.535630",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_tracer.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1165a420_20250902131140",
    "category": "api_references",
    "content": "def multiply(a_and_b)\nA simple calculator tool that multiplies two integers.",
    "source": "codebase:test_tracer.py",
    "timestamp": "2025-09-02T13:11:40.539695",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_tracer.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_4e456d90_20250902131140",
    "category": "api_references",
    "content": "def test_nullable_str(input_val, expected_output)\nTests the nullable_str function for various inputs.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.549132",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_2d43df37_20250902131140",
    "category": "api_references",
    "content": "def test_str_to_bool_valid(input_val, expected_output)\nTests _str_to_bool with valid boolean string representations.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.553339",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_de5ae569_20250902131140",
    "category": "api_references",
    "content": "def test_str_to_bool_invalid(invalid_input)\nTests _str_to_bool with invalid inputs, expecting ArgumentTypeError.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.557315",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_99ac6871_20250902131140",
    "category": "api_references",
    "content": "def test_get_param_type_details(annotation, expected_core_type, expected_is_optional, expected_is_list)\nTests _get_param_type_details for various type annotations.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.561011",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_5254c124_20250902131140",
    "category": "api_references",
    "content": "def test_determine_argparse_type_and_nargs(core_param_type, is_param_list, expected_kwargs)\nTests _determine_argparse_type_and_nargs for type and nargs mapping.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.564724",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_65b0b1f3_20250902131140",
    "category": "api_references",
    "content": "def test_build_help_string(cls_name, param_name, core_type, is_optional, is_list, expected_help)\nTests _build_help_string for generating correct help messages.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.570575",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7b2a0df8_20250902131140",
    "category": "api_references",
    "content": "def mock_parser()\nFixture to create a mock ArgumentParser.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.580147",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d4989602_20250902131140",
    "category": "api_references",
    "content": "def get_param_obj(cls, param_name)\nHelper to get an inspect.Parameter object from a class's __init__.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.584299",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9c368bf3_20250902131140",
    "category": "api_references",
    "content": "def test_add_argument_for_parameter(mock_parser, param_name, cls, expected_cli_name_part, expected_argparse_kwargs_subset)\nTests _add_argument_for_parameter for correct argument configuration.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.590677",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1c744185_20250902131140",
    "category": "api_references",
    "content": "def test_add_arguments_for_class(mock_parser)\nTests _add_arguments_for_class by checking calls to _add_argument_for_parameter.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.594815",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_50325b22_20250902131140",
    "category": "api_references",
    "content": "def test_add_arguments_for_class_no_init_params(mock_parser)\nTests _add_arguments_for_class with a class having no __init__ parameters.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.599546",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_24c1d8ce_20250902131140",
    "category": "api_references",
    "content": "def test_create_argument_parser()\nTests _create_argument_parser for basic parser properties.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.604387",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_bb1a474c_20250902131140",
    "category": "api_references",
    "content": "def test_instantiate_classes()\nTests _instantiate_classes with various argument types and defaults.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.608342",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_e687e9d0_20250902131140",
    "category": "api_references",
    "content": "def test_instantiate_classes_error_handling(caplog)\nTests error logging during class instantiation failure.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.612357",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_e407d929_20250902131140",
    "category": "api_references",
    "content": "def run_lightning_cli(classes_to_configure, cli_args_list)\nHelper to run lightning_cli with mocked sys.argv.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.616212",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_113b3354_20250902131140",
    "category": "api_references",
    "content": "def test_lightning_cli_no_classes()\nTests lightning_cli with no classes provided.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.621361",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7435e6b4_20250902131140",
    "category": "api_references",
    "content": "def test_lightning_cli_simple_config()\nTests lightning_cli with a simple class and various argument scenarios.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.626573",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_55acd13b_20250902131140",
    "category": "api_references",
    "content": "def test_lightning_cli_complex_config_types()\nTests lightning_cli with ComplexConfig, checking various type conversions.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.631901",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_bdc13cd2_20250902131140",
    "category": "api_references",
    "content": "def test_lightning_cli_complex_config_defaults()\nTests that __init__ defaults are used if CLI args are not provided.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.635985",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_0abdd97f_20250902131140",
    "category": "api_references",
    "content": "def test_lightning_cli_multiple_classes()\nTests configuring multiple classes simultaneously.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.639812",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_351cc678_20250902131140",
    "category": "api_references",
    "content": "def test_lightning_cli_missing_required_arg_exits(capsys)\nTests that argparse exits if a required argument is missing.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.644394",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_917331c4_20250902131140",
    "category": "api_references",
    "content": "def test_lightning_cli_optional_no_default_behavior()\nTests Optional parameter without __init__ default.",
    "source": "codebase:test_config.py",
    "timestamp": "2025-09-02T13:11:40.648375",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1bfeaba3_20250902131140",
    "category": "api_references",
    "content": "def sample_resources()\nProvides a sample NamedResources object for testing.",
    "source": "codebase:test_client.py",
    "timestamp": "2025-09-02T13:11:40.655583",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_ff2b728f_20250902131140",
    "category": "api_references",
    "content": "def sample_task_input()\nProvides a sample input for a task.",
    "source": "codebase:test_client.py",
    "timestamp": "2025-09-02T13:11:40.659644",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_975850f7_20250902131140",
    "category": "api_references",
    "content": "def test_local_client_core_functionality(sample_resources)\nTest core DevTaskLoader functionality: initialization, polling, resources, and rollouts.",
    "source": "codebase:test_client.py",
    "timestamp": "2025-09-02T13:11:40.663799",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_dadc64b2_20250902131140",
    "category": "api_references",
    "content": "def test_local_client_error_handling(sample_resources)\nTest DevTaskLoader error handling and edge cases.",
    "source": "codebase:test_client.py",
    "timestamp": "2025-09-02T13:11:40.668158",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_5abf2c73_20250902131140",
    "category": "api_references",
    "content": "def sync_http_function()\nA simple synchronous function that makes HTTP requests.",
    "source": "codebase:test_tracer_http.py",
    "timestamp": "2025-09-02T13:11:40.674632",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_tracer_http.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_ad6362d5_20250902131140",
    "category": "api_references",
    "content": "def test_normal_mode_sync_requests()\nTest HttpTracer in normal mode with synchronous requests.",
    "source": "codebase:test_tracer_http.py",
    "timestamp": "2025-09-02T13:11:40.678724",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_tracer_http.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7b93830d_20250902131140",
    "category": "api_references",
    "content": "def test_subprocess_mode_sync_requests()\nTest HttpTracer in subprocess mode with synchronous requests.",
    "source": "codebase:test_tracer_http.py",
    "timestamp": "2025-09-02T13:11:40.682943",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_tracer_http.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_86e5bc1e_20250902131140",
    "category": "api_references",
    "content": "def test_span_attributes_detailed()\nTest that spans contain expected attributes when headers and body are included.",
    "source": "codebase:test_tracer_http.py",
    "timestamp": "2025-09-02T13:11:40.687173",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_tracer_http.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_5fdda2da_20250902131140",
    "category": "api_references",
    "content": "def test_span_attributes_minimal()\nTest that spans contain minimal attributes when headers and body are excluded.",
    "source": "codebase:test_tracer_http.py",
    "timestamp": "2025-09-02T13:11:40.691107",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_tracer_http.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_22b66651_20250902131140",
    "category": "api_references",
    "content": "def test_error_handling_in_subprocess()\nTest that errors in subprocess mode are properly propagated.",
    "source": "codebase:test_tracer_http.py",
    "timestamp": "2025-09-02T13:11:40.694997",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/tests/test_tracer_http.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_38181cd7_20250902131140",
    "category": "technical_documentation",
    "content": "Agent Lightning:\n\nAgent Lightning is the absolute trainer to light up AI agents.",
    "source": "codebase:index.md",
    "timestamp": "2025-09-02T13:11:40.700066",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/index.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_459127b6_20250902131140",
    "category": "technical_documentation",
    "content": "Features:\n\n- Turn your agent into an optimizable beast with **ZERO CODE CHANGE** (almost)! \ud83d\udca4\n- Build with **ANY** agent framework (LangChain, OpenAI Agent SDK, AutoGen, CrewAI, ...); or even WITHOUT agent framework (Python OpenAI). You name it! \ud83e\udd16",
    "source": "codebase:index.md",
    "timestamp": "2025-09-02T13:11:40.704379",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/index.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_ad39269a_20250902131140",
    "category": "technical_documentation",
    "content": "Quick Links:\n\n- [Installation](quickstart/installation.md) - Get started with Agent Lightning\n- [Quickstart](quickstart/getting-started.md) - Learn the fundamentals of Agent Lightning",
    "source": "codebase:index.md",
    "timestamp": "2025-09-02T13:11:40.708469",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/index.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_47becda6_20250902131140",
    "category": "technical_documentation",
    "content": "Resources:\n\n- 8/11/2025 [Training AI Agents to Write and Self-correct SQL with Reinforcement Learning](https://medium.com/@yugez/training-ai-agents-to-write-and-self-correct-sql-with-reinforcement-learning-571ed31281ad) Medium.\n- 8/5/2025 [Agent Lightning: Train ANY AI Agents with Reinforcement Learning](https://arxiv.org/abs/2508.03680) arXiv paper.",
    "source": "codebase:index.md",
    "timestamp": "2025-09-02T13:11:40.712768",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/index.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_ac8c180d_20250902131140",
    "category": "technical_documentation",
    "content": "Citation:\n\nIf you find Agent Lightning useful in your research or projects, please cite our paper:\n",
    "source": "codebase:index.md",
    "timestamp": "2025-09-02T13:11:40.716788",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/index.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_08e26c22_20250902131140",
    "category": "technical_documentation",
    "content": "License:\n\nSee the [LICENSE](https://github.com/microsoft/agent-lightning/blob/main/LICENSE) file for details.",
    "source": "codebase:index.md",
    "timestamp": "2025-09-02T13:11:40.720713",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/index.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_198e5885_20250902131140",
    "category": "code_examples",
    "content": "Class AgentRunner:\nManages the agent's execution loop and integrates with AgentOps.\n\nThis class orchestrates the interaction between the agent (`LitAgent`) and\nthe server (`AgentLightningClient`). It handles polling for tasks, executing\nthe agent's logic, and reporting results back to the server. If enabled,\nit will also automatically trace each rollout using AgentOps.\n\nAttributes:\n    agent: The `LitAgent` instance containing the agent's logic.\n    client: The `AgentLightningClient` for server communication.\n    tracer: The tracer instance for this runner/worker.\n    worker_id: An optional identifier for the worker process.\n    max_tasks: The maximum number of tasks to process before stopping.\n\nMethods: ['__init__', '_log_prefix', '_to_rollout_object', 'run', 'iter']",
    "source": "codebase:runner.py",
    "timestamp": "2025-09-02T13:11:40.729049",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/runner.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_4855ca77_20250902131140",
    "category": "api_references",
    "content": "def _log_prefix(self, rollout_id)\nGenerates a standardized log prefix for the current worker.",
    "source": "codebase:runner.py",
    "timestamp": "2025-09-02T13:11:40.733152",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/runner.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_2f8d4186_20250902131140",
    "category": "api_references",
    "content": "def _to_rollout_object(self, result, rollout_id)\nStandardizes the agent's return value into a Rollout object.\n\nArgs:\n    result: The output from the agent's rollout method.\n    rollout_id: The unique identifier for the current task.\n\nReturns:\n    A standardized `Rollout` object for reporting to the server.",
    "source": "codebase:runner.py",
    "timestamp": "2025-09-02T13:11:40.737166",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/runner.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_a65c2e75_20250902131140",
    "category": "api_references",
    "content": "def run(self)\nPoll the task and rollout once synchronously.",
    "source": "codebase:runner.py",
    "timestamp": "2025-09-02T13:11:40.741632",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/runner.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7a24bc9c_20250902131140",
    "category": "api_references",
    "content": "def iter(self)\nExecutes the synchronous polling and rollout loop.",
    "source": "codebase:runner.py",
    "timestamp": "2025-09-02T13:11:40.745644",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/runner.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_0b239193_20250902131140",
    "category": "code_examples",
    "content": "Class ServerDataStore:\nA centralized, thread-safe, async, in-memory data store for the server's state.\nThis holds the task queue, versioned resources, and completed rollouts.\n\nMethods: ['__init__', 'get_processing_tasks']",
    "source": "codebase:server.py",
    "timestamp": "2025-09-02T13:11:40.753044",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/server.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_8c55b4b8_20250902131140",
    "category": "code_examples",
    "content": "Class AgentLightningServer:\nThe main SDK class for developers to control the Agent Lightning Server.\n\nThis class manages the server lifecycle, task queueing, resources updates,\nand retrieval of results, providing a simple interface for the optimization logic.\n\nMethods: ['__init__', '_setup_routes']",
    "source": "codebase:server.py",
    "timestamp": "2025-09-02T13:11:40.757494",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/server.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_37c62460_20250902131140",
    "category": "api_references",
    "content": "def get_processing_tasks(self)\nReturns a copy of currently processing tasks for timeout checking.",
    "source": "codebase:server.py",
    "timestamp": "2025-09-02T13:11:40.761913",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/server.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_53f0ba93_20250902131140",
    "category": "api_references",
    "content": "def __init__(self, host, port, task_timeout_seconds)\nInitializes the server controller.\n\nArgs:\n    host: The host to bind the server to.\n    port: The port to bind the server to.\n    task_timeout_seconds: Time in seconds after which a claimed task is considered stale and requeued.",
    "source": "codebase:server.py",
    "timestamp": "2025-09-02T13:11:40.766560",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/server.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7e38c068_20250902131140",
    "category": "api_references",
    "content": "def _setup_routes(self)\nSetup FastAPI routes.",
    "source": "codebase:server.py",
    "timestamp": "2025-09-02T13:11:40.771323",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/server.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9a0cb886_20250902131140",
    "category": "api_references",
    "content": "def nullable_str(value)\nConverts specific string values (case-insensitive) to None, otherwise returns the string.",
    "source": "codebase:config.py",
    "timestamp": "2025-09-02T13:11:40.778509",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_664412b6_20250902131140",
    "category": "api_references",
    "content": "def nullable_int(value)\nConverts specific string values (case-insensitive) to None, otherwise returns the integer.",
    "source": "codebase:config.py",
    "timestamp": "2025-09-02T13:11:40.782832",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_056be3b5_20250902131140",
    "category": "api_references",
    "content": "def nullable_float(value)\nConverts specific string values (case-insensitive) to None, otherwise returns the float.",
    "source": "codebase:config.py",
    "timestamp": "2025-09-02T13:11:40.787216",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_4c507782_20250902131140",
    "category": "api_references",
    "content": "def _str_to_bool(v)\nConverts common string representations of bool to Python bool (case-insensitive).",
    "source": "codebase:config.py",
    "timestamp": "2025-09-02T13:11:40.791326",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d03a83dc_20250902131140",
    "category": "api_references",
    "content": "def _get_param_type_details(param_annotation)\nDetermines the core type, if it's Optional, and if it's a List.\nReturns: (core_type, is_optional, is_list)\n- For Optional[T]: (T, True, is_list_status_of_T)\n- For List[T]: (List[T], is_optional_status_of_List, True)\n- For Optional[List[T]]: (List[T], True, True)",
    "source": "codebase:config.py",
    "timestamp": "2025-09-02T13:11:40.795381",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_4b44a80a_20250902131140",
    "category": "api_references",
    "content": "def _determine_argparse_type(param_type)\nDetermines the type for argparse based on parameter type details.",
    "source": "codebase:config.py",
    "timestamp": "2025-09-02T13:11:40.799993",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_a97601f3_20250902131140",
    "category": "api_references",
    "content": "def _determine_argparse_type_and_nargs(core_param_type, is_param_list)\nDetermines the 'type' and 'nargs' for argparse based on parameter type details.",
    "source": "codebase:config.py",
    "timestamp": "2025-09-02T13:11:40.804514",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_3f12b14c_20250902131140",
    "category": "api_references",
    "content": "def _build_help_string(cls_name, param_name, core_type, is_optional, is_list)\nConstructs a descriptive help string for a CLI argument.",
    "source": "codebase:config.py",
    "timestamp": "2025-09-02T13:11:40.808626",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_5ab19ac0_20250902131140",
    "category": "api_references",
    "content": "def _add_argument_for_parameter(parser, cls, param_name, param_obj, dest_name, resolved_param_annotation)\nConfigures and adds a single CLI argument for an __init__ parameter.",
    "source": "codebase:config.py",
    "timestamp": "2025-09-02T13:11:40.812714",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_c6c9ebe8_20250902131140",
    "category": "api_references",
    "content": "def _add_arguments_for_class(parser, cls, class_arg_configs_maps)\nAdds all relevant CLI arguments for a given class by processing its __init__ parameters.",
    "source": "codebase:config.py",
    "timestamp": "2025-09-02T13:11:40.816883",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_764db277_20250902131140",
    "category": "api_references",
    "content": "def _create_argument_parser()\nCreates and returns the main ArgumentParser with default settings.",
    "source": "codebase:config.py",
    "timestamp": "2025-09-02T13:11:40.821200",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_593fa3d6_20250902131140",
    "category": "api_references",
    "content": "def _instantiate_classes(parsed_args, classes, class_arg_configs_maps)\nInstantiates classes using the parsed CLI arguments and the stored mappings.",
    "source": "codebase:config.py",
    "timestamp": "2025-09-02T13:11:40.825292",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_ac1fb289_20250902131140",
    "category": "api_references",
    "content": "def lightning_cli()\nParses command-line arguments to configure and instantiate provided CliConfigurable classes.\n\nArgs:\n    *classes: One or more classes that inherit from CliConfigurable. Each class's\n              __init__ parameters will be exposed as command-line arguments.\n\nReturns:\n    A tuple of instantiated objects, corresponding to the input classes in order.",
    "source": "codebase:config.py",
    "timestamp": "2025-09-02T13:11:40.829820",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/config.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_33aee7cb_20250902131140",
    "category": "code_examples",
    "content": "Class AgentLightningClient:\nClient for interacting with a version-aware Agent Lightning Server.\n\nThis client handles polling for tasks, fetching specific versions of resources\n(like model configurations), and posting completed rollouts back to the server.\nIt provides both synchronous and asynchronous methods for these operations and\nincludes a cache for resources.\n\nMethods: ['__init__', '_request_json', '_post_json', 'poll_next_task', 'get_resources_by_id', 'get_latest_resources', 'post_rollout']",
    "source": "codebase:client.py",
    "timestamp": "2025-09-02T13:11:40.837272",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_c7a5a45e_20250902131140",
    "category": "code_examples",
    "content": "Class DevTaskLoader:\nA local task manager for development that provides sample tasks and resources.\n\nThis client mocks the server APIs by maintaining a local queue of tasks and resources\nwithin the same process. It's designed for development, testing, and scenarios where\na full Agent Lightning server is not needed.\n\nThe DevTaskLoader overrides the polling and resource fetching methods to return data\nfrom local collections instead of making HTTP requests to a remote server.\n\nMethods: ['__init__', 'rollouts', 'poll_next_task', 'get_resources_by_id', 'get_latest_resources', 'post_rollout', '__repr__']",
    "source": "codebase:client.py",
    "timestamp": "2025-09-02T13:11:40.842197",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_188750fd_20250902131140",
    "category": "api_references",
    "content": "def __init__(self, endpoint, poll_interval, timeout)\nInitializes the AgentLightningClient.\n\nArgs:\n    endpoint: The root URL of the Agent Lightning server.\n    poll_interval: The interval in seconds to wait between polling for new tasks.\n    timeout: The timeout in seconds for HTTP requests.",
    "source": "codebase:client.py",
    "timestamp": "2025-09-02T13:11:40.846816",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_5820aaeb_20250902131140",
    "category": "api_references",
    "content": "def _request_json(self, url)\nMakes a sync GET request to the specified URL and returns the JSON response.\n\nArgs:\n    url: The URL to request.\n\nReturns:\n    The JSON response as a dictionary or None if the request fails.",
    "source": "codebase:client.py",
    "timestamp": "2025-09-02T13:11:40.851398",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_11c2992e_20250902131140",
    "category": "api_references",
    "content": "def _post_json(self, url, payload)\nMakes a sync POST request with a JSON payload.\n\nArgs:\n    url: The URL to post to.\n    payload: The dictionary data to send as JSON.\n\nReturns:\n    The JSON response as a dictionary or None if the request fails.",
    "source": "codebase:client.py",
    "timestamp": "2025-09-02T13:11:40.855707",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_26c7a5af_20250902131140",
    "category": "api_references",
    "content": "def poll_next_task(self)\nPolls the server synchronously for the next task until one is available.\n\nReturns:\n    A Task object containing the task details, including the required `resources_id`.",
    "source": "codebase:client.py",
    "timestamp": "2025-09-02T13:11:40.860568",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_99bb507a_20250902131140",
    "category": "api_references",
    "content": "def get_resources_by_id(self, resource_id)\nFetches a specific version of resources by its ID synchronously, using a cache.\n\nArgs:\n    resource_id: The ID of the resources to fetch, usually from a Task's metadata.\n\nReturns:\n    A ResourcesUpdate object containing the versioned resources, or None if not found.",
    "source": "codebase:client.py",
    "timestamp": "2025-09-02T13:11:40.865419",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_4e68066d_20250902131140",
    "category": "api_references",
    "content": "def get_latest_resources(self)\nFetches the latest available resources from the server synchronously.\n\nReturns:\n    A ResourcesUpdate object containing the latest resources.",
    "source": "codebase:client.py",
    "timestamp": "2025-09-02T13:11:40.869988",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_f393f1f5_20250902131140",
    "category": "api_references",
    "content": "def post_rollout(self, rollout)\nPosts a completed rollout to the server synchronously.\n\nArgs:\n    rollout: A Rollout object containing the results of a task.\n\nReturns:\n    The server's JSON response as a dictionary.",
    "source": "codebase:client.py",
    "timestamp": "2025-09-02T13:11:40.874396",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_ed133f15_20250902131140",
    "category": "api_references",
    "content": "def __init__(self, tasks, resources)\nInitializes the DevTaskLoader with pre-defined tasks and resources.\n\nArgs:\n    tasks: Either a List of TaskInput objects or a List of Task objects.\n    resources: Either NamedResources or ResourcesUpdate object.\n    **kwargs: Additional arguments passed to the parent AgentLightningClient.",
    "source": "codebase:client.py",
    "timestamp": "2025-09-02T13:11:40.878911",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_4b547bbc_20250902131140",
    "category": "api_references",
    "content": "def rollouts(self)\nReturn rollouts that have been posted back to the loader.",
    "source": "codebase:client.py",
    "timestamp": "2025-09-02T13:11:40.883176",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_5f44968e_20250902131140",
    "category": "api_references",
    "content": "def poll_next_task(self)\nReturns the next task from the local queue.\n\nIf tasks are TaskInput objects, assembles them into Task objects.\nIf tasks are already Task objects, returns them directly.\n\nReturns:\n    The next Task object from the local task list.",
    "source": "codebase:client.py",
    "timestamp": "2025-09-02T13:11:40.887845",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/client.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_bd16d561_20250902131140",
    "category": "code_examples",
    "content": "Class Triplet:\nA standard structure for a single turn in a trajectory.\n\nMethods: []",
    "source": "codebase:types.py",
    "timestamp": "2025-09-02T13:11:40.893570",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/types.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_b3cf02fe_20250902131140",
    "category": "code_examples",
    "content": "Class Rollout:\nThe standard reporting object from client to server.\n\nMethods: []",
    "source": "codebase:types.py",
    "timestamp": "2025-09-02T13:11:40.898199",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/types.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_5b20ba68_20250902131140",
    "category": "code_examples",
    "content": "Class Task:\nA task (rollout request) to be processed by the client agent.\n\nMethods: []",
    "source": "codebase:types.py",
    "timestamp": "2025-09-02T13:11:40.902392",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/types.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_0c574f69_20250902131140",
    "category": "code_examples",
    "content": "Class Resource:\nBase class for all tunable resources.\n\nMethods: []",
    "source": "codebase:types.py",
    "timestamp": "2025-09-02T13:11:40.907174",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/types.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_86ed0479_20250902131140",
    "category": "code_examples",
    "content": "Class LLM:\nProvide an LLM endpoint and model name as a resource.\n\nAttributes:\n    endpoint (str): The URL of the LLM API endpoint.\n    model (str): The identifier for the model to be used (e.g., 'gpt-4o').\n    sampling_parameters (SamplingParameters): A dictionary of hyperparameters\n        for model inference, such as temperature, top_p, etc.\n\nMethods: []",
    "source": "codebase:types.py",
    "timestamp": "2025-09-02T13:11:40.911969",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/types.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_014f6e92_20250902131140",
    "category": "code_examples",
    "content": "Class PromptTemplate:\nA prompt template as a resource.\n\nAttributes:\n    template (str): The template string. The format depends on the engine.\n    engine (Literal['jinja', 'f-string', 'poml']): The templating engine\n        to use for rendering the prompt. I imagine users can use their own\n        customized engines, but algos can only well operate on a subset of them.\n\nMethods: []",
    "source": "codebase:types.py",
    "timestamp": "2025-09-02T13:11:40.916752",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/types.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_2e05a9b0_20250902131140",
    "category": "code_examples",
    "content": "Class ResourcesUpdate:\nA resource update message to be sent from the server to clients.\n\nThis message contains a dictionary of resources that clients should use\nfor subsequent tasks. It is used to update the resources available to\nclients dynamically.\n\nMethods: []",
    "source": "codebase:types.py",
    "timestamp": "2025-09-02T13:11:40.921546",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/types.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_d4b273f6_20250902131140",
    "category": "code_examples",
    "content": "Class GenericResponse:\nA generic response message that can be used for various purposes.\n\nMethods: []",
    "source": "codebase:types.py",
    "timestamp": "2025-09-02T13:11:40.926173",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/types.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_b3905847_20250902131140",
    "category": "code_examples",
    "content": "Class ParallelWorkerBase:\nBase class for objects that can be parallelized across multiple worker processes.\n\nThis class defines the standard lifecycle for parallel processing:\n\nMain Process:\n    1. init() - Initialize the object in the main process\n    2. spawn workers and call init_worker() in each worker\n    3. run() - Execute the main workload in parallel across workers\n    4. teardown_worker() - Clean up resources in each worker\n    5. teardown() - Final cleanup in the main process\n\nSubclasses should implement the run() method and optionally override\nthe lifecycle methods for custom initialization and cleanup behavior.\n\nMethods: ['__init__', 'init', 'init_worker', 'run', 'teardown_worker', 'teardown']",
    "source": "codebase:types.py",
    "timestamp": "2025-09-02T13:11:40.930915",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/types.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_322df7a3_20250902131140",
    "category": "api_references",
    "content": "def __init__(self)\nInitialize the base class. This method can be overridden by subclasses.",
    "source": "codebase:types.py",
    "timestamp": "2025-09-02T13:11:40.935310",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/types.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_f374eeb3_20250902131140",
    "category": "code_examples",
    "content": "Class LitAgent:\nBase class for the training and validation logic of an agent.\n\nDevelopers should subclass this class and implement the rollout methods\nto define the agent's behavior for a single task. The agent's logic\nis completely decoupled from the server communication and training\ninfrastructure.\n\nMethods: ['__init__', 'set_trainer', 'trainer', 'tracer', 'set_runner', 'runner', 'on_rollout_start', 'on_rollout_end', 'training_rollout', 'validation_rollout']",
    "source": "codebase:litagent.py",
    "timestamp": "2025-09-02T13:11:40.941150",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/litagent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_37e89bb3_20250902131140",
    "category": "api_references",
    "content": "def __init__(self)\nInitialize the LitAgent.\n\nArgs:\n    trained_agents: Optional string representing the trained agents.\n                    This can be used to track which agents have been trained by this instance.",
    "source": "codebase:litagent.py",
    "timestamp": "2025-09-02T13:11:40.946419",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/litagent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_be71e3ac_20250902131140",
    "category": "api_references",
    "content": "def set_trainer(self, trainer)\nSet the trainer for this agent.\n\nArgs:\n    trainer: The Trainer instance that will handle training and validation.",
    "source": "codebase:litagent.py",
    "timestamp": "2025-09-02T13:11:40.951821",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/litagent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_f70551d9_20250902131140",
    "category": "api_references",
    "content": "def trainer(self)\nGet the trainer for this agent.\n\nReturns:\n    The Trainer instance associated with this agent.",
    "source": "codebase:litagent.py",
    "timestamp": "2025-09-02T13:11:40.956440",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/litagent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_3a81ca8e_20250902131140",
    "category": "api_references",
    "content": "def tracer(self)\nGet the tracer for this agent.\n\nReturns:\n    The BaseTracer instance associated with this agent.",
    "source": "codebase:litagent.py",
    "timestamp": "2025-09-02T13:11:40.961859",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/litagent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_78c1d5e4_20250902131140",
    "category": "api_references",
    "content": "def set_runner(self, runner)\nSet the runner for this agent.\n\nArgs:\n    runner: The AgentRunner instance that will handle the execution of rollouts.",
    "source": "codebase:litagent.py",
    "timestamp": "2025-09-02T13:11:40.966414",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/litagent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_b9635123_20250902131140",
    "category": "api_references",
    "content": "def runner(self)\nGet the runner for this agent.\n\nReturns:\n    The AgentRunner instance associated with this agent.",
    "source": "codebase:litagent.py",
    "timestamp": "2025-09-02T13:11:40.970783",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/litagent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_6cd3d071_20250902131140",
    "category": "api_references",
    "content": "def on_rollout_start(self, task, runner, tracer)\nHook called immediately before a rollout begins.\n\nArgs:\n    task: The :class:`Task` object that will be processed.\n    runner: The :class:`AgentRunner` managing the rollout.\n    tracer: The tracer instance associated with the runner.\n\nSubclasses can override this method to implement custom logic such as\nlogging, metric collection, or resource setup. By default, this is a\nno-op.",
    "source": "codebase:litagent.py",
    "timestamp": "2025-09-02T13:11:40.975687",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/litagent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_65d2f9ed_20250902131140",
    "category": "api_references",
    "content": "def on_rollout_end(self, task, rollout, runner, tracer)\nHook called after a rollout completes.\n\nArgs:\n    task: The :class:`Task` object that was processed.\n    rollout: The resulting :class:`Rollout` object.\n    runner: The :class:`AgentRunner` managing the rollout.\n    tracer: The tracer instance associated with the runner.\n\nSubclasses can override this method for cleanup or additional\nlogging. By default, this is a no-op.",
    "source": "codebase:litagent.py",
    "timestamp": "2025-09-02T13:11:40.980384",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/litagent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_083f4798_20250902131141",
    "category": "api_references",
    "content": "def training_rollout(self, task, rollout_id, resources)\nDefines the agent's behavior for a single training task.\n\nThis method should contain the logic for how the agent processes an\ninput, uses the provided resources (like LLMs or prompts), and\nproduces a result.\n\nArgs:\n    task: The task object received from the server, containing the\n          input data and metadata.\n    rollout_id: A unique identifier for the rollout, used for tracking\n                and reporting purposes.\n    resources: A dictionary of named resources (e.g., LLMs, prompt\n               templates) for the agent to use.\n\nReturns:\n    The result of the rollout, which can be one of:\n    - None. The tracing should be handled by the agent runner.\n    - A float representing the final reward.\n    - A list of `Triplet` objects for detailed, step-by-step feedback.\n    - A list of `ReadableSpan` objects for OpenTelemetry tracing.\n    - A list of dictionaries for any trace spans.\n    - A complete `Rollout` object for full control over reporting.",
    "source": "codebase:litagent.py",
    "timestamp": "2025-09-02T13:11:41.023677",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/litagent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_4339d307_20250902131141",
    "category": "api_references",
    "content": "def validation_rollout(self, task, rollout_id, resources)\nDefines the agent's behavior for a single validation task.\n\nBy default, this method redirects to `training_rollout`. Override it\nif the agent should behave differently during validation.\n\nArgs:\n    task: The task object received from the server, containing the\n          input data and metadata.\n    rollout_id: A unique identifier for the validation rollout,\n                used for tracking and reporting purposes.\n    resources: A dictionary of named resources for the agent to use.\n\nReturns:\n    The result of the validation rollout. See `training_rollout` for\n    possible return types.",
    "source": "codebase:litagent.py",
    "timestamp": "2025-09-02T13:11:41.052306",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/litagent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_841f74e3_20250902131141",
    "category": "code_examples",
    "content": "Class Trainer:\nOrchestrates the distributed execution of agent rollouts.\n\nThe Trainer is responsible for launching one or more worker processes\nthat run the agent's execution loop. It manages multiprocessing,\nhandles graceful shutdown, and serves as the main entry point for\nrunning a client-side agent fleet.\n\nAttributes:\n    dev: If True, rollouts are run against the dev endpoint provided in `fit`.\n    n_workers: Number of agent workers (processes) to run in parallel.\n    max_tasks: Maximum number of tasks to process per worker. If None,\n               workers run until no more tasks are available.\n    daemon: Whether worker processes should be daemons. Daemon processes\n            are terminated automatically when the main process exits.\n    tracer: A tracer instance, or a string pointing to the class full name or a dictionary with a 'type' key\n            that specifies the class full name and other initialization parameters.\n            If None, a default `AgentOpsTracer` will be created with the current settings.\n    triplet_exporter: An instance of `TripletExporter` to export triplets from traces,\n                      or a dictionary with the initialization parameters for the exporter.\n\nMethods: ['__init__', '_make_tracer', 'init', 'teardown', 'client', '_init_client', '_worker_main_loop', '_initialize_worker_env', '_teardown_worker_env', 'kill_orphaned_processes', 'fit']",
    "source": "codebase:trainer.py",
    "timestamp": "2025-09-02T13:11:41.068543",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/trainer.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_3871f10e_20250902131141",
    "category": "api_references",
    "content": "def _make_tracer(self, tracer)\nCreates a tracer instance based on the provided configuration.",
    "source": "codebase:trainer.py",
    "timestamp": "2025-09-02T13:11:41.073410",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/trainer.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_a13d094d_20250902131141",
    "category": "api_references",
    "content": "def client(self)\nReturns the AgentLightningClient instance.",
    "source": "codebase:trainer.py",
    "timestamp": "2025-09-02T13:11:41.078630",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/trainer.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_052c6939_20250902131141",
    "category": "api_references",
    "content": "def _worker_main_loop(self, agent, worker_id, is_async)\nThe main function for each worker process.\n\nThis function initializes the client and the loop, then starts the\nexecution. It also configures process-specific settings like the\nprocess title and signal handling.\n\nArgs:\n    agent: The `LitAgent` instance to run.\n    worker_id: The unique ID for this worker.\n    is_async: A boolean indicating if the async loop should be run.",
    "source": "codebase:trainer.py",
    "timestamp": "2025-09-02T13:11:41.083481",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/trainer.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1c67dbf7_20250902131141",
    "category": "api_references",
    "content": "def kill_orphaned_processes()\nKill any orphaned processes that may have been left behind by previous runs.\nThis is useful for cleaning up after crashes or unexpected exits.",
    "source": "codebase:trainer.py",
    "timestamp": "2025-09-02T13:11:41.087927",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/trainer.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_8ae28d79_20250902131141",
    "category": "api_references",
    "content": "def reward(fn)\nA decorator to wrap a function that computes rewards.\nIt will automatically handle the input and output of the function.",
    "source": "codebase:reward.py",
    "timestamp": "2025-09-02T13:11:41.093853",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/reward.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_69de0a0e_20250902131141",
    "category": "api_references",
    "content": "def wrap_result(result)\nWrap the result of the function in a dict.",
    "source": "codebase:reward.py",
    "timestamp": "2025-09-02T13:11:41.098541",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/reward.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_2d25fdb6_20250902131141",
    "category": "technical_documentation",
    "content": "Server-client Architecture:\n\nArticle to be written.\n",
    "source": "codebase:server-client-architecture.md",
    "timestamp": "2025-09-02T13:11:41.103742",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/deep-dive/server-client-architecture.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_301111f6_20250902131141",
    "category": "technical_documentation",
    "content": "Getting Started:\n\nThis guide walks you through building your first Agent Lightning application - a simple prompt optimization system that finds the best system prompt for an AI agent.",
    "source": "codebase:getting-started.md",
    "timestamp": "2025-09-02T13:11:41.109339",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/quickstart/getting-started.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_30661ee2_20250902131141",
    "category": "technical_documentation",
    "content": "What You'll Build:\n\nYou'll create a distributed training system with a server that manages optimization algorithms and tasks, a client with multiple workers that execute tasks in parallel, and built-in telemetry for monitoring and debugging.\n",
    "source": "codebase:getting-started.md",
    "timestamp": "2025-09-02T13:11:41.114427",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/quickstart/getting-started.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_d14b92d8_20250902131141",
    "category": "technical_documentation",
    "content": "Part 1: Building Your Agent:\n\nLet's start by creating a simple agent that can answer questions using OpenAI's API. Your agent needs to inherit from `LitAgent` and implement a `training_rollout` method.",
    "source": "codebase:getting-started.md",
    "timestamp": "2025-09-02T13:11:41.119323",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/quickstart/getting-started.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_c5866302_20250902131141",
    "category": "technical_documentation",
    "content": "Step 1: Create Your Agent Class:\n\nFirst, import the necessary dependencies and create your agent class:\n",
    "source": "codebase:getting-started.md",
    "timestamp": "2025-09-02T13:11:41.124240",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/quickstart/getting-started.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_183a563a_20250902131141",
    "category": "technical_documentation",
    "content": "Step 2: Execute the Task:\n\nInside the training_rollout method, extract the system prompt from resources and use it to complete the task:\n",
    "source": "codebase:getting-started.md",
    "timestamp": "2025-09-02T13:11:41.128910",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/quickstart/getting-started.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_3f04c4b2_20250902131141",
    "category": "technical_documentation",
    "content": "Extract the system prompt being tested:\nsystem_prompt = resources[\"system_prompt\"].template",
    "source": "codebase:getting-started.md",
    "timestamp": "2025-09-02T13:11:41.133518",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/quickstart/getting-started.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_13fe79f4_20250902131141",
    "category": "technical_documentation",
    "content": "Call OpenAI with this prompt:\nresult = openai.chat.completions.create(\n    model=\"gpt-4o-mini\",\n    messages=[",
    "source": "codebase:getting-started.md",
    "timestamp": "2025-09-02T13:11:41.138814",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/quickstart/getting-started.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_051c221e_20250902131141",
    "category": "technical_documentation",
    "content": "Step 3: Return a Reward Score:\n\nAfter executing the task, return a reward score between 0 and 1:\n",
    "source": "codebase:getting-started.md",
    "timestamp": "2025-09-02T13:11:41.143803",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/quickstart/getting-started.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_e6dae49a_20250902131141",
    "category": "technical_documentation",
    "content": "In real scenarios, calculate based on response quality:\nreturn random.uniform(0, 1)\n```\n",
    "source": "codebase:getting-started.md",
    "timestamp": "2025-09-02T13:11:41.148741",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/quickstart/getting-started.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_52d19117_20250902131141",
    "category": "technical_documentation",
    "content": "Step 4: Set Up the Trainer:\n\nTo run your agent with multiple workers in parallel:\n",
    "source": "codebase:getting-started.md",
    "timestamp": "2025-09-02T13:11:41.153879",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/quickstart/getting-started.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_bb5b1b2f_20250902131141",
    "category": "technical_documentation",
    "content": "Set Up Your Environment:\n\nWe strongly recommend creating a new virtual environment to avoid conflicts with other packages. You can use either `conda` or `venv`. **Python 3.10 or later** is recommended.",
    "source": "codebase:installation.md",
    "timestamp": "2025-09-02T13:11:41.158914",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/quickstart/installation.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_b880733a_20250902131141",
    "category": "technical_documentation",
    "content": "Install Core Training Dependencies (Optional):\n\nIf you are running RL with Agent-Lightning, the next step is to install the essential packages: `PyTorch`, `FlashAttention`, `vLLM` and `VERL`. The following versions and installation order have been tested and are confirmed to work.\n",
    "source": "codebase:installation.md",
    "timestamp": "2025-09-02T13:11:41.163993",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/quickstart/installation.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_f7c0c180_20250902131141",
    "category": "technical_documentation",
    "content": "Install Agent Lightning:\n\nNow, you're ready to install Agent Lightning itself.\n",
    "source": "codebase:installation.md",
    "timestamp": "2025-09-02T13:11:41.168561",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/quickstart/installation.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_c546384a_20250902131141",
    "category": "technical_documentation",
    "content": "Install Agent Frameworks (Optional):\n\nIf you plan to use other agent frameworks, you can install them with the following commands. If you don't need these, feel free to skip this step.\nWe recommend doing this as the final step to avoid dependency versions being overwritten by mistake.",
    "source": "codebase:installation.md",
    "timestamp": "2025-09-02T13:11:41.173532",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/quickstart/installation.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_11f0299a_20250902131141",
    "category": "technical_documentation",
    "content": "AutoGen (Recommended to install first):\npip install \"autogen-agentchat\" \"autogen-ext[openai]\"",
    "source": "codebase:installation.md",
    "timestamp": "2025-09-02T13:11:41.178211",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/quickstart/installation.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_6343fab3_20250902131141",
    "category": "technical_documentation",
    "content": "LiteLLM:\npip install \"litellm[proxy]\"",
    "source": "codebase:installation.md",
    "timestamp": "2025-09-02T13:11:41.183301",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/quickstart/installation.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_2796a143_20250902131141",
    "category": "technical_documentation",
    "content": "MCP:\npip install mcp",
    "source": "codebase:installation.md",
    "timestamp": "2025-09-02T13:11:41.188616",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/quickstart/installation.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_36bd29df_20250902131141",
    "category": "technical_documentation",
    "content": "UV:\npip install uv",
    "source": "codebase:installation.md",
    "timestamp": "2025-09-02T13:11:41.193887",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/quickstart/installation.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_b3c02ecd_20250902131141",
    "category": "technical_documentation",
    "content": "SQL Agent with Agent Lightning:\n\n> This tutorial is tested with `verl==0.5.0` and `vllm==0.10.0`.\n",
    "source": "codebase:train-sql-agent.md",
    "timestamp": "2025-09-02T13:11:41.198898",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/how-to/train-sql-agent.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_00e96663_20250902131141",
    "category": "technical_documentation",
    "content": "SQL Agent Implementation:\n\nThe design of Agent-lightning **allows flexible integration with various agent frameworks**, including AutoGen, CrewAI, OpenAI Agent SDK, LangGraph, and more. It can also work without agent frameworks, allowing you to train an agent built from scratch with Python code. See [our example gallery]({{ config.repo_url }}/tree/{{ config.extra.source_commit }}/examples) for more details.\n",
    "source": "codebase:train-sql-agent.md",
    "timestamp": "2025-09-02T13:11:41.203979",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/how-to/train-sql-agent.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_7f05c012_20250902131141",
    "category": "technical_documentation",
    "content": "Client-Server Training with Agent Lightning:\n\nThe training process uses a distributed client-server architecture designed by Agent Lightning to efficiently fine-tune the underlying LLM. This separation allows for scalable data generation across multiple clients while centralizing the computationally intensive model training on a dedicated server with GPUs, and also provides opportunities for customizing algorithms and training strategies (like [prompt optimization]({{ config.repo_url }}/tree/{{ config.extra.source_commit }}/examples/apo)) with minimal code changes.\n",
    "source": "codebase:train-sql-agent.md",
    "timestamp": "2025-09-02T13:11:41.208600",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/how-to/train-sql-agent.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_e112c6ca_20250902131141",
    "category": "technical_documentation",
    "content": "Running the Example:\n\n1. Prepare the dataset: download from [here](https://drive.google.com/file/d/1oi9J1jZP9TyM35L85CL3qeGWl2jqlnL6/view) and unzip it to the `data` folder. It's basically a [Spider V1](https://yale-lily.github.io/spider) dataset converted to Parquet format. The dataset contains about 8000 training samples and about 2000 test samples, from which we sampled 500 samples for evaluation.\n   ```bash",
    "source": "codebase:train-sql-agent.md",
    "timestamp": "2025-09-02T13:11:41.213987",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/how-to/train-sql-agent.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_101ef5b2_20250902131141",
    "category": "technical_documentation",
    "content": "Debug the Agent without verl:\n\nYou can run the agent client alone without the `verl` server. This is useful for debugging the agent logic and SQL execution.\n",
    "source": "codebase:train-sql-agent.md",
    "timestamp": "2025-09-02T13:11:41.219266",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/how-to/train-sql-agent.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_2d356f5d_20250902131141",
    "category": "technical_documentation",
    "content": "Evaluation:\n\nThe example is evaluated using Llama-3.2-Instruct models. The models are trained on the Spider dataset for 2 epochs, with evaluation performed on a randomly selected subset of 500 test samples to compute held-out accuracy. The default setup for running agent clients during evaluation is as follows:\n",
    "source": "codebase:train-sql-agent.md",
    "timestamp": "2025-09-02T13:11:41.224458",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/how-to/train-sql-agent.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_05ce52a4_20250902131141",
    "category": "technical_documentation",
    "content": "W&B Report:\n\n[link](https://api.wandb.ai/links/ultmaster/4cid500g)",
    "source": "codebase:train-sql-agent.md",
    "timestamp": "2025-09-02T13:11:41.229656",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/how-to/train-sql-agent.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_82162a50_20250902131141",
    "category": "technical_documentation",
    "content": "Performance Metrics:\n\n![](../assets/sql-agent-val-reward-curve.png)\n",
    "source": "codebase:train-sql-agent.md",
    "timestamp": "2025-09-02T13:11:41.234893",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/how-to/train-sql-agent.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_a32b9fe9_20250902131141",
    "category": "technical_documentation",
    "content": "Efficiency Metrics:\n\n| Model         | Size   |   Context |   Max Turns | Agents                        |   # GPUs |   # Steps |   Time (h) |   Time/Step (s) |   Rollout Time (%) |   Update Actor Time (%) |\n|---------------|--------|-----------|-------------|-------------------------------|----------|-----------|------------|-----------------|--------------------|-------------------------|",
    "source": "codebase:train-sql-agent.md",
    "timestamp": "2025-09-02T13:11:41.239967",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/how-to/train-sql-agent.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_075f3233_20250902131141",
    "category": "technical_documentation",
    "content": "Client Side:\n\n::: agentlightning.litagent\n    options:",
    "source": "codebase:core.md",
    "timestamp": "2025-09-02T13:11:41.244892",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/reference/core.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_e4109eff_20250902131141",
    "category": "technical_documentation",
    "content": "Server Side:\n\n::: agentlightning.server\n    options:",
    "source": "codebase:core.md",
    "timestamp": "2025-09-02T13:11:41.250012",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/reference/core.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_222074fc_20250902131141",
    "category": "technical_documentation",
    "content": "Utilities:\n\n::: agentlightning.config\n    options:",
    "source": "codebase:core.md",
    "timestamp": "2025-09-02T13:11:41.254797",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/reference/core.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_f24f7e1d_20250902131141",
    "category": "technical_documentation",
    "content": "Reinforcement Learning API:\n\n::: agentlightning.verl\n    options:",
    "source": "codebase:rl.md",
    "timestamp": "2025-09-02T13:11:41.260359",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/docs/reference/rl.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_b06630c1_20250902131141",
    "category": "technical_documentation",
    "content": "Calc-X Example:\n\nThis example requires a single node with one GPU of at least 40GB memory.\n",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:41.266446",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/examples/calc_x/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_27239b2a_20250902131141",
    "category": "technical_documentation",
    "content": "Common Issues:\n\n1. The agent client will hang indefinitely if the environment is not properly configured. Check if uv and mcp are properly installed. Use `tests/test_mcp_calculator.py` to verify the installation.",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:41.271763",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/examples/calc_x/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_3ff7c51e_20250902131141",
    "category": "api_references",
    "content": "def normalize_option(option)\n    >>> normalize_option(\"  (A)  \n\")\n    'A'\n    ",
    "source": "codebase:calc_agent.py",
    "timestamp": "2025-09-02T13:11:41.278279",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/examples/calc_x/calc_agent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_7f031152_20250902131141",
    "category": "api_references",
    "content": "def is_option_result(result)\n    >>> is_option_result(\"  A)  \n\")\n    True\n    >>> is_option_result(\"  23/7 \")\n    False\n    ",
    "source": "codebase:calc_agent.py",
    "timestamp": "2025-09-02T13:11:41.283914",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/examples/calc_x/calc_agent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_2fcffe59_20250902131141",
    "category": "technical_documentation",
    "content": "Overview:\n\nThis example originally runs on a single node with four GPUs, each requiring at least 40GB of memory.\n",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:41.289950",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/examples/rag/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_61e394e2_20250902131141",
    "category": "technical_documentation",
    "content": "Preparing the Retrieval Corpus:\n\nTo enable semantic retrieval with this mcp server, we need two files:\n",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:41.295724",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/examples/rag/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_333a5fca_20250902131141",
    "category": "technical_documentation",
    "content": "Step 1. Collecting Text Chunks:\n\nYou first need a collection of text passages (chunks). For example, you can download a Wikipedia-based dataset such as `wiki18_100w.zip` in the [FlashRAG_dataset](https://huggingface.co/datasets/FlashRAG) or use other pre-split corpora.  \n",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:41.300645",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/examples/rag/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_8faa6dc0_20250902131141",
    "category": "technical_documentation",
    "content": "Step 2. Creating the FAISS Index (`nq_hnsw_faiss_n32e40.index`):\n\n- Use a sentence embedding model (e.g., `BAAI/bge-large-en-v1.5`) to encode each chunk into a vector.  \n- Build a FAISS index from these vectors.  ",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:41.305875",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/examples/rag/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_be43452a_20250902131141",
    "category": "technical_documentation",
    "content": "Step 3. Creating the Chunk List (`nq_list.pkl`):\n\n- Store the raw text chunks in a Python list.  \n- Save this list with `pickle`.  ",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:41.311219",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/examples/rag/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_acffa66f_20250902131141",
    "category": "technical_documentation",
    "content": "Example Schema:\n\n- **`nq_hnsw_faiss_n32e40.index`**  \n  - Type: FAISS HNSW index  ",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:41.316755",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/examples/rag/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_5ddb2ea0_20250902131141",
    "category": "technical_documentation",
    "content": "Step 4. Code Example: Building Index and Chunk List:\nWarning: The following example only demonstrates a small-scale workflow. In practice, if the dataset is large, you should encode the text in batches and incrementally add them to the index.\n\n```python",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:41.322290",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/examples/rag/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_3f5c08b9_20250902131141",
    "category": "technical_documentation",
    "content": "1. Prepare your text chunks (list of strings):\nchunk_texts = [\n    \"The Eiffel Tower is located in Paris, France.\",\n    \"Albert Einstein developed the theory of relativity.\",",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:41.327791",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/examples/rag/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_9e60bb4f_20250902131141",
    "category": "technical_documentation",
    "content": "2. Load embedding model:\nmodel = SentenceTransformer(\"BAAI/bge-large-en-v1.5\")",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:41.332970",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/examples/rag/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_e0611640_20250902131141",
    "category": "technical_documentation",
    "content": "Spider Example:\n\nThis example requires a single node with one GPU of at least 40GB memory.\n",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:41.343910",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/examples/spider/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "technical_documentation_1a895129_20250902131141",
    "category": "technical_documentation",
    "content": "Evaluation:\n\nResults are coming soon.",
    "source": "codebase:README.md",
    "timestamp": "2025-09-02T13:11:41.349200",
    "metadata": {
      "type": "documentation",
      "file": "/Users/jankootstra/agent-lightning-main/examples/spider/README.md"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9796b54b_20250902131141",
    "category": "api_references",
    "content": "def get_table_info(self)\nGet the table information in a human-readable format.",
    "source": "codebase:sql_agent.py",
    "timestamp": "2025-09-02T13:11:41.357718",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/examples/spider/sql_agent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_2d41a229_20250902131141",
    "category": "api_references",
    "content": "def truncate_execuion(self, execution)\nTruncate the execution result to a reasonable length.",
    "source": "codebase:sql_agent.py",
    "timestamp": "2025-09-02T13:11:41.363430",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/examples/spider/sql_agent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_df85cfae_20250902131141",
    "category": "api_references",
    "content": "def write_query(self, state)\nGenerate SQL query to fetch information.",
    "source": "codebase:sql_agent.py",
    "timestamp": "2025-09-02T13:11:41.368277",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/examples/spider/sql_agent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_70b3fbe0_20250902131141",
    "category": "api_references",
    "content": "def execute_query(self, state)\nExecute SQL query.",
    "source": "codebase:sql_agent.py",
    "timestamp": "2025-09-02T13:11:41.373330",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/examples/spider/sql_agent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_8c61f2df_20250902131141",
    "category": "api_references",
    "content": "def check_query(self, state)\nCheck the SQL query for correctness.",
    "source": "codebase:sql_agent.py",
    "timestamp": "2025-09-02T13:11:41.378172",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/examples/spider/sql_agent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_76c2e662_20250902131141",
    "category": "api_references",
    "content": "def rewrite_query(self, state)\nRewrite SQL query if necessary.",
    "source": "codebase:sql_agent.py",
    "timestamp": "2025-09-02T13:11:41.383758",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/examples/spider/sql_agent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_559564a4_20250902131141",
    "category": "api_references",
    "content": "def should_continue(self, state)\nDetermine if the agent should continue based on the result.",
    "source": "codebase:sql_agent.py",
    "timestamp": "2025-09-02T13:11:41.388960",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/examples/spider/sql_agent.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_0b50ca67_20250902131141",
    "category": "api_references",
    "content": "def retrieve(query)\nRetrieve relevant chunks from the Wikipedia dataset.\n\nArgs:\n    query (str): The query string to search for.\n\nReturns:\n    list: A list of dictionaries containing the retrieved chunks and their metadata.",
    "source": "codebase:wiki_retriever_mcp.py",
    "timestamp": "2025-09-02T13:11:41.395585",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/examples/rag/wiki_retriever_mcp/wiki_retriever_mcp.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_b581cd48_20250902131141",
    "category": "code_examples",
    "content": "Class Evaluator:\nA simple evaluator\n\nMethods: ['__init__', 'eval_hardness', 'eval_exact_match', 'eval_partial_match']",
    "source": "codebase:evaluation.py",
    "timestamp": "2025-09-02T13:11:41.410293",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/examples/spider/spider_eval/evaluation.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_0b5af9f1_20250902131141",
    "category": "code_examples",
    "content": "Class Schema:\nSimple schema which maps table&column to a unique identifier\n\nMethods: ['__init__', 'schema', 'idMap', '_map']",
    "source": "codebase:process_sql.py",
    "timestamp": "2025-09-02T13:11:41.421037",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/examples/spider/spider_eval/process_sql.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_196c8c7e_20250902131141",
    "category": "api_references",
    "content": "def get_schema(db)\nGet database's schema, which is a dict with table name as key\nand list of column names as value\n:param db: database path\n:return: schema dict",
    "source": "codebase:process_sql.py",
    "timestamp": "2025-09-02T13:11:41.426001",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/examples/spider/spider_eval/process_sql.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_db800bce_20250902131141",
    "category": "api_references",
    "content": "def scan_alias(toks)\nScan the index of 'as' and build the map for all alias",
    "source": "codebase:process_sql.py",
    "timestamp": "2025-09-02T13:11:41.431337",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/examples/spider/spider_eval/process_sql.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_651cf703_20250902131141",
    "category": "api_references",
    "content": "def parse_col(toks, start_idx, tables_with_alias, schema, default_tables)\n:returns next idx, column id",
    "source": "codebase:process_sql.py",
    "timestamp": "2025-09-02T13:11:41.436315",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/examples/spider/spider_eval/process_sql.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_2a614cfb_20250902131141",
    "category": "api_references",
    "content": "def parse_col_unit(toks, start_idx, tables_with_alias, schema, default_tables)\n:returns next idx, (agg_op id, col_id)",
    "source": "codebase:process_sql.py",
    "timestamp": "2025-09-02T13:11:41.441265",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/examples/spider/spider_eval/process_sql.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_ec75a720_20250902131141",
    "category": "api_references",
    "content": "def parse_table_unit(toks, start_idx, tables_with_alias, schema)\n:returns next idx, table id, table name",
    "source": "codebase:process_sql.py",
    "timestamp": "2025-09-02T13:11:41.446286",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/examples/spider/spider_eval/process_sql.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_48d52230_20250902131141",
    "category": "api_references",
    "content": "def parse_from(toks, start_idx, tables_with_alias, schema)\nAssume in the from clause, all table units are combined with join",
    "source": "codebase:process_sql.py",
    "timestamp": "2025-09-02T13:11:41.452118",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/examples/spider/spider_eval/process_sql.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_2216e280_20250902131141",
    "category": "code_examples",
    "content": "Class AgentOpsTracer:\nTraces agent execution using AgentOps.\n\nThis tracer provides functionality to capture execution details using the\nAgentOps library. It manages the AgentOps client initialization, server setup,\nand integration with the OpenTelemetry tracing ecosystem.\n\nAttributes:\n    agentops_managed: Whether to automatically manage `agentops`.\n                      When set to true, tracer calls `agentops.init()`\n                      automatically and launches an agentops endpoint locally.\n                      If not, you are responsible for calling and using it\n                      before using the tracer.\n    instrument_managed: Whether to automatically manage instrumentation.\n                        When set to false, you will manage the instrumentation\n                        yourself and the tracer might not work as expected.\n    daemon: Whether the AgentOps server runs as a daemon process.\n            Only applicable if `agentops_managed` is True.\n\nMethods: ['__init__', '__getstate__', '__setstate__', 'init', 'teardown', 'instrument', 'uninstrument', 'init_worker', 'teardown_worker', 'trace_context', 'get_last_trace', 'get_langchain_callback_handler']",
    "source": "codebase:agentops.py",
    "timestamp": "2025-09-02T13:11:41.464905",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/agentops.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_36847087_20250902131141",
    "category": "api_references",
    "content": "def trace_context(self, name)\nStarts a new tracing context. This should be used as a context manager.\n\nArgs:\n    name: Optional name for the tracing context.\n\nYields:\n    The LightningSpanProcessor instance to collect spans.",
    "source": "codebase:agentops.py",
    "timestamp": "2025-09-02T13:11:41.470498",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/agentops.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_276d66ea_20250902131141",
    "category": "api_references",
    "content": "def get_last_trace(self)\nRetrieves the raw list of captured spans from the most recent trace.\n\nReturns:\n    A list of OpenTelemetry `ReadableSpan` objects.",
    "source": "codebase:agentops.py",
    "timestamp": "2025-09-02T13:11:41.476027",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/agentops.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_f5ec635e_20250902131141",
    "category": "api_references",
    "content": "def get_langchain_callback_handler(self, tags)\nGet the Langchain callback handler for integrating with Langchain.\n\nArgs:\n    tags: Optional list of tags to apply to the Langchain callback handler.\n\nReturns:\n    An instance of the Langchain callback handler.",
    "source": "codebase:agentops.py",
    "timestamp": "2025-09-02T13:11:41.481812",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/agentops.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1bcd2efc_20250902131141",
    "category": "api_references",
    "content": "def spans(self)\nGet the list of spans collected by this processor.\nThis is useful for debugging and testing purposes.\n\nReturns:\n    List of ReadableSpan objects collected during tracing.",
    "source": "codebase:agentops.py",
    "timestamp": "2025-09-02T13:11:41.488741",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/agentops.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_48828431_20250902131141",
    "category": "api_references",
    "content": "def on_end(self, span)\nProcess a span when it ends.\n\nArgs:\n    span: The span that has ended.",
    "source": "codebase:agentops.py",
    "timestamp": "2025-09-02T13:11:41.494515",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/agentops.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_b120bcdc_20250902131141",
    "category": "code_examples",
    "content": "Class HttpTracer:\nA tracer implementation that captures HTTP requests using httpdbg.\n\nThis tracer hooks into the Python HTTP libraries and captures all\nHTTP requests and responses made during the traced code execution.\nThe captured requests are converted to OpenTelemetry spans for\ncompatibility with the rest of the tracing ecosystem.\n\nCaution: The current implementation of HttpTracer is very fragile,\nand we do not recommend using it in production.\nIt is primarily for demonstration and testing purposes.\n\nAttributes:\n    include_headers: Whether to include HTTP headers in the spans.\n        Headers may contain sensitive information. Use with caution.\n    include_body: Whether to include HTTP request and response bodies in the spans.\n        Bodies may be large and contain sensitive information. Use with caution.\n    include_agentlightning_requests: Whether to include requests initiated by AgentLightning itself.\n    subprocess_mode: Whether to run trace_run and trace_run_async in subprocesses for isolation.\n    subprocess_timeout: Timeout for subprocess execution in seconds.\n\nMethods: ['__init__', 'init_worker', 'trace_context', 'get_last_trace', '_convert_to_spans', 'trace_run', '_trace_run_subprocess', '_subprocess_worker']",
    "source": "codebase:http.py",
    "timestamp": "2025-09-02T13:11:41.502842",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/http.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_cef5d61a_20250902131141",
    "category": "api_references",
    "content": "def init_worker(self, worker_id)\nInitialize the tracer in a worker process.\n\nArgs:\n    worker_id: The ID of the worker process.",
    "source": "codebase:http.py",
    "timestamp": "2025-09-02T13:11:41.508047",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/http.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_1494eeca_20250902131141",
    "category": "api_references",
    "content": "def trace_context(self, name)\nStarts a new HTTP tracing context. This should be used as a context manager.\n\nArgs:\n    name: Optional name for the tracing context.\n\nYields:\n    The HTTPRecords instance containing traced HTTP activities.",
    "source": "codebase:http.py",
    "timestamp": "2025-09-02T13:11:41.513328",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/http.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_6cc1e1f6_20250902131141",
    "category": "api_references",
    "content": "def get_last_trace(self)\nRetrieves the raw list of captured spans from the most recent trace.\n\nReturns:\n    A list of OpenTelemetry `ReadableSpan` objects converted from HTTP records.",
    "source": "codebase:http.py",
    "timestamp": "2025-09-02T13:11:41.518364",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/http.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_91ee7538_20250902131141",
    "category": "api_references",
    "content": "def _convert_to_spans(self, records)\nConvert HTTPRecords to OpenTelemetry spans.\n\nArgs:\n    records: The HTTPRecords instance containing HTTP traces.\n\nReturns:\n    A list of ReadableSpan objects representing the HTTP activities.",
    "source": "codebase:http.py",
    "timestamp": "2025-09-02T13:11:41.523925",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/http.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_0b520602_20250902131141",
    "category": "api_references",
    "content": "def trace_run(self, func)\nA convenience wrapper to trace the execution of a single synchronous function.\n\nIf subprocess_mode is enabled, the function will be executed in an isolated subprocess\nto prevent HTTP hooks from affecting the parent process.\n\nArgs:\n    func: The synchronous function to execute and trace.\n    *args: Positional arguments to pass to the function.\n    **kwargs: Keyword arguments to pass to the function.\n\nReturns:\n    The return value of the function.",
    "source": "codebase:http.py",
    "timestamp": "2025-09-02T13:11:41.529188",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/http.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_a400f6cd_20250902131141",
    "category": "api_references",
    "content": "def _trace_run_subprocess(self, func, args, kwargs, is_async)\nExecute a function in a subprocess with HTTP tracing.\n\nArgs:\n    func: The function to execute.\n    args: Positional arguments to pass to the function.\n    kwargs: Keyword arguments to pass to the function.\n    is_async: Whether the function is asynchronous.\n\nReturns:\n    The return value of the function.",
    "source": "codebase:http.py",
    "timestamp": "2025-09-02T13:11:41.534624",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/http.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_49159ff3_20250902131141",
    "category": "api_references",
    "content": "def _subprocess_worker(self, func, args, kwargs, result_queue, is_async)\nWorker function that runs in the subprocess to execute the traced function.\n\nArgs:\n    func: The function to execute.\n    args: Positional arguments.\n    kwargs: Keyword arguments.\n    result_queue: Queue to send results back to parent process.\n    is_async: Whether the function is asynchronous.",
    "source": "codebase:http.py",
    "timestamp": "2025-09-02T13:11:41.539675",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/http.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_acc4cf55_20250902131141",
    "category": "code_examples",
    "content": "Class Transition:\nTransition class representing one transition in a trajectory.\nState and action are a list of token IDs.\n\nMethods: []",
    "source": "codebase:triplet.py",
    "timestamp": "2025-09-02T13:11:41.549418",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/triplet.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_9ca09019_20250902131141",
    "category": "code_examples",
    "content": "Class RewardMatchPolicy:\nHow to find the reward for each transition from the trace.\nIn all cases, the reward must have data `{\"type\": \"reward\", \"value\": <float>|None}`,\nas defined in `reward.py`.\n\nMethods: []",
    "source": "codebase:triplet.py",
    "timestamp": "2025-09-02T13:11:41.554667",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/triplet.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_0e367056_20250902131141",
    "category": "code_examples",
    "content": "Class TraceTree:\nA trace item, along with its span and children.\n\nMethods: ['__init__', 'start_time', 'end_time', 'find_id', 'add_child', 'visualize', 'names_tuple', 'traverse', 'to_json', 'from_spans', 'agent_name', 'maybe_reward_dict', 'is_reward_span', 'find_llm_calls', 'repair_hierarchy', 'match_rewards', 'to_trajectory', '__repr__']",
    "source": "codebase:triplet.py",
    "timestamp": "2025-09-02T13:11:41.560405",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/triplet.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_7497ba0a_20250902131141",
    "category": "code_examples",
    "content": "Class TripletExporter:\nA class to export triplet data from OpenTelemetry spans.\n\nAttributes:\n    repair_hierarchy: When `repair_hierarchy` is set to True, the trace will be repaired with the time information.\n        See `TraceTree.repair_hierarchy` for more details.\n    llm_call_match: Regular expression pattern to match LLM call span names.\n    agent_match: Optional regular expression pattern to match agent span names. If None, all agents are matched.\n    exclude_llm_call_in_reward: Whether to exclude LLM calls that occur within reward spans.\n    reward_match: Policy for matching rewards to LLM calls.\n\nMethods: ['__init__', 'export']",
    "source": "codebase:triplet.py",
    "timestamp": "2025-09-02T13:11:41.566180",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/triplet.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_e29db1b1_20250902131141",
    "category": "api_references",
    "content": "def visualize(self, filename, interested_span_match)\nVisualize the trace tree using graphviz.\nFor debugging purposes only.\nUse `interested_span_match` to filter the spans (and its ancesters) to be visualized.",
    "source": "codebase:triplet.py",
    "timestamp": "2025-09-02T13:11:41.571887",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/triplet.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9c855b99_20250902131141",
    "category": "api_references",
    "content": "def names_tuple(self)\nReturn the span name, and a list of children.\nEach child is also a tuple of span name and a list of children.\nUseful for debugging and testing.",
    "source": "codebase:triplet.py",
    "timestamp": "2025-09-02T13:11:41.577467",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/triplet.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_a9057d4e_20250902131141",
    "category": "api_references",
    "content": "def traverse(self)\nTraverse the trace tree and return a list of all spans.",
    "source": "codebase:triplet.py",
    "timestamp": "2025-09-02T13:11:41.583317",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/triplet.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_13cdf46e_20250902131141",
    "category": "api_references",
    "content": "def from_spans(cls, spans)\nCreate a TraceTree from a list of spans.\nAll spans without parents found will be considered as candidate root spans.\nIf multiple root spans are found, a virtual root span will be created as the parent of all root spans.",
    "source": "codebase:triplet.py",
    "timestamp": "2025-09-02T13:11:41.588940",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/triplet.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_66f44640_20250902131141",
    "category": "api_references",
    "content": "def agent_name(self)\nReturn the name of agent span. Return the agent or None (not an agent at all).\nExtend this function to support more agent frameworks.",
    "source": "codebase:triplet.py",
    "timestamp": "2025-09-02T13:11:41.594681",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/triplet.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_ea6d870b_20250902131141",
    "category": "api_references",
    "content": "def find_llm_calls(self)\nFind all LLM calls in the trace tree.\n\nThe LLM call is defined as a span with type = request and name matching `llm_call_match`.\nIf `agent_match` is not None, it must also reside in an agent span (type = agent) with name matched.\n\nReturn a list of traces and the agent names (why it's selected).",
    "source": "codebase:triplet.py",
    "timestamp": "2025-09-02T13:11:41.600538",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/triplet.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_a12a571f_20250902131141",
    "category": "api_references",
    "content": "def repair_hierarchy(self)\nWe find that sometimes the hierarchy is not correct, due to the way the spans are created.\nThe spans within the agent frameworks (e.g., OpenAI Agent SDK) and spans within the LLM frameworks\n(e.g., Anthropic) are created in two systems.\nSo the inner LLM completion span does not necessarily have an agent span as a parent.\nRather they sometimes directly become children of the root span.\nThis becomes a problem when we want to select the LLM completion span with agent as filter.\nTo repair the hierarchy, for each children of the root span, we find a span over the whole tree,\nwith duration covering the current span and being closest to the current span.\n\nThis function modifies the tree in place.",
    "source": "codebase:triplet.py",
    "timestamp": "2025-09-02T13:11:41.606169",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/triplet.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_8f056384_20250902131141",
    "category": "api_references",
    "content": "def match_rewards(self, reward_match, llm_calls)\nMatch the rewards to the LLM calls.",
    "source": "codebase:triplet.py",
    "timestamp": "2025-09-02T13:11:41.611494",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/triplet.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_af9d23dd_20250902131141",
    "category": "api_references",
    "content": "def to_trajectory(self, llm_call_match, agent_match, exclude_llm_call_in_reward, dedup_llm_call, reward_match, final_reward)\nConvert the trace tree to a trajectory.\n\nFirst, we find all the LLM calls (span type = request, `llm_call_match` matching the span name).\nIf the agent match is set, we check, for each LLM call,\nif it resides in an agent (span type = agent, `agent_match` matching the span name).\nThe above sets the basis for the trajectory, as we use the prompt token IDs and response token IDs for each LLM call,\nas the state and action of each transition.\n\nThen, we find the reward for each transition.\nThe reward is searched on the trace tree, after the LLM call,\nuntil the next LLM call or the end of the tree depending on the policy.\nIt can be enforced to a sibling or the first occurrence in the time order, depending on the policy.\nIf a reward is never found for a transition, it is set to None.",
    "source": "codebase:triplet.py",
    "timestamp": "2025-09-02T13:11:41.616889",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/triplet.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_d9844ecf_20250902131141",
    "category": "api_references",
    "content": "def export(self, spans)\nConvert OpenTelemetry spans to a list of Triplet objects.",
    "source": "codebase:triplet.py",
    "timestamp": "2025-09-02T13:11:41.623054",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/triplet.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_fba8ff1c_20250902131141",
    "category": "code_examples",
    "content": "Class BaseTracer:\nAn abstract base class for tracers.\n\nThis class defines a standard interface for tracing code execution,\ncapturing the resulting spans, and providing them for analysis. It is\ndesigned to be backend-agnostic, allowing for different implementations\n(e.g., for AgentOps, OpenTelemetry, Docker, etc.).\n\nThe primary interaction pattern is through the `trace_context`\ncontext manager, which ensures that traces are properly started and captured,\neven in the case of exceptions.\n\nA typical workflow:\n\n```python\ntracer = YourTracerImplementation()\n\ntry:\n    with tracer.trace_context(name=\"my_traced_task\"):\n        # ... code to be traced ...\n        run_my_agent_logic()\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n\n# Retrieve the trace data after the context block\nspans: list[ReadableSpan] = tracer.get_last_trace()\n\n# Process the trace data\nif trace_tree:\n    rl_triplets = TripletExporter().export(spans)\n    # ... do something with the triplets\n```\n\nMethods: ['trace_context', 'get_last_trace', 'trace_run']",
    "source": "codebase:base.py",
    "timestamp": "2025-09-02T13:11:41.629461",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/base.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_632654e0_20250902131141",
    "category": "api_references",
    "content": "def trace_context(self, name)\nStarts a new tracing context. This should be used as a context manager.\n\nThe implementation should handle the setup and teardown of the tracing\nfor the enclosed code block. It must ensure that any spans generated\nwithin the `with` block are collected and made available via\n`get_last_trace`.\n\nArgs:\n    name: The name for the root span of this trace context.",
    "source": "codebase:base.py",
    "timestamp": "2025-09-02T13:11:41.635087",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/base.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_276d66ea_20250902131141",
    "category": "api_references",
    "content": "def get_last_trace(self)\nRetrieves the raw list of captured spans from the most recent trace.\n\nReturns:\n    A list of OpenTelemetry `ReadableSpan` objects.",
    "source": "codebase:base.py",
    "timestamp": "2025-09-02T13:11:41.640761",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/base.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_763a6fd9_20250902131141",
    "category": "api_references",
    "content": "def trace_run(self, func)\nA convenience wrapper to trace the execution of a single synchronous function.\n\nArgs:\n    func: The synchronous function to execute and trace.\n    *args: Positional arguments to pass to the function.\n    **kwargs: Keyword arguments to pass to the function.\n\nReturns:\n    The return value of the function.",
    "source": "codebase:base.py",
    "timestamp": "2025-09-02T13:11:41.646726",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/tracer/base.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_d27a995c_20250902131141",
    "category": "code_examples",
    "content": "Class NaiveChatCompletionScheduler:\nA very naive implementation of ChatCompletionScheduler for demo purpose,\nonly do single-turn chat completion.\n\nMethods: ['_postprocess']",
    "source": "codebase:verl_chat_scheduler.py",
    "timestamp": "2025-09-02T13:11:41.657957",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/instrumentation/verl_chat_scheduler.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_cf09f548_20250902131141",
    "category": "api_references",
    "content": "def instrument_agentops()\nInstrument agentops to capture token IDs.\nAutomatically detects and uses the appropriate patching method based on the installed agentops version.",
    "source": "codebase:agentops.py",
    "timestamp": "2025-09-02T13:11:41.667595",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/instrumentation/agentops.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_59fc3b2b_20250902131141",
    "category": "api_references",
    "content": "def agentops_local_server()\nReturns a Flask app that can be used to test agentops integration.\nThis server provides endpoints for token fetching and a catch-all endpoint.",
    "source": "codebase:agentops.py",
    "timestamp": "2025-09-02T13:11:41.673135",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/instrumentation/agentops.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_c2dfe0a9_20250902131141",
    "category": "api_references",
    "content": "def _run_server()\nInternal function to run the Flask server.\nThis is used to avoid issues with multiprocessing and Flask's reloader.",
    "source": "codebase:agentops.py",
    "timestamp": "2025-09-02T13:11:41.679176",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/instrumentation/agentops.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_4185fbb5_20250902131141",
    "category": "code_examples",
    "content": "Class AgentLightningTrainer:\nSpecialized PPO trainer for agent-based reinforcement learning.\n\nThis trainer is designed specifically for scenarios where the model interacts with\nexternal environments, tools, or APIs through an AgentLightningServer. It simplifies\nthe training loop by removing the complex conditional logic present in the original\nRayPPOTrainer and focusing on the agent mode workflow.\n\nKey differences from RayPPOTrainer:\n1. Uses AgentModeDaemon for server communication\n2. Simplified data flow without pop/union operations\n3. Direct batch processing through agent daemon\n4. Streamlined validation using agent_mode validation\n\nMethods: ['_validate', '_train_step', 'fit']",
    "source": "codebase:trainer.py",
    "timestamp": "2025-09-02T13:11:41.689925",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/verl/trainer.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_dccb3a57_20250902131141",
    "category": "api_references",
    "content": "def get_left_padded_ids_and_attention_mask(ids, max_length, pad_token_id)\nLeft-pad (or truncate) a sequence of token IDs to a fixed length,\nand build the corresponding attention mask.\n\nArgs:\n    ids:             the original list of token IDs.\n    max_length:      desired total length after padding/truncation.\n    pad_token_id:    ID to use for padding.\n\nReturns:\n    padded_ids (any):      list of length == max_length.\n    attention_mask (any):  list of same length: 1 for non-pad tokens, 0 for pads.",
    "source": "codebase:daemon.py",
    "timestamp": "2025-09-02T13:11:41.700562",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/verl/daemon.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_84cd2152_20250902131141",
    "category": "api_references",
    "content": "def get_right_padded_ids_and_attention_mask(ids, max_length, pad_token_id)\nRight-pad (or truncate) a sequence of token IDs to a fixed length,\nand build the corresponding attention mask.\n\nArgs:\n    ids:            the original list of token IDs.\n    max_length:     desired total length after padding/truncation.\n    pad_token_id:   ID to use for padding.\n\nReturns:\n    padded_ids (any):     list of length == max_length.\n    attention_mask (any): list of same length: 1 for non-pad tokens, 0 for pads.",
    "source": "codebase:daemon.py",
    "timestamp": "2025-09-02T13:11:41.706945",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/verl/daemon.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "code_examples_05641b56_20250902131141",
    "category": "code_examples",
    "content": "Class AgentModeDaemon:\nAgentModeDaemon using the AgentLightningServer SDK.\n\nThis class manages the server lifecycle, task queueing, and results\nretrieval, while also running a proxy server for LLM requests. It maintains\nthe original interface for compatibility with the RayPPOTrainer.\n\nMethods: ['__init__', '_start_proxy_server', 'start', 'set_up_data_and_server', '_validate_data', 'run_until_all_finished', 'get_test_metrics', 'get_train_data_batch', 'clear_data_and_server', '_fillna_reward']",
    "source": "codebase:daemon.py",
    "timestamp": "2025-09-02T13:11:41.713524",
    "metadata": {
      "type": "class",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/verl/daemon.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_234a161d_20250902131141",
    "category": "api_references",
    "content": "def _start_proxy_server(self)\nInitializes and runs a Flask-based proxy server in a separate thread.\nThis proxy load-balances requests to the actual backend LLM servers.",
    "source": "codebase:daemon.py",
    "timestamp": "2025-09-02T13:11:41.719549",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/verl/daemon.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_e61e67d0_20250902131141",
    "category": "api_references",
    "content": "def start(self)\nStarts the main AgentLightningServer and the proxy server.",
    "source": "codebase:daemon.py",
    "timestamp": "2025-09-02T13:11:41.725040",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/verl/daemon.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_5599cba3_20250902131141",
    "category": "api_references",
    "content": "def set_up_data_and_server(self, data, server_addresses, is_train)\nSynchronous wrapper for setting up data and server resources.",
    "source": "codebase:daemon.py",
    "timestamp": "2025-09-02T13:11:41.730549",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/verl/daemon.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_710ced8f_20250902131141",
    "category": "api_references",
    "content": "def run_until_all_finished(self, verbose)\nSynchronously waits for all queued tasks to be completed and reported.",
    "source": "codebase:daemon.py",
    "timestamp": "2025-09-02T13:11:41.736179",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/verl/daemon.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_9edeca3d_20250902131141",
    "category": "api_references",
    "content": "def get_test_metrics(self)\nCalculates and returns metrics for a validation run.",
    "source": "codebase:daemon.py",
    "timestamp": "2025-09-02T13:11:41.742923",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/verl/daemon.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_52afaace_20250902131141",
    "category": "api_references",
    "content": "def get_train_data_batch(self, max_prompt_length, max_response_length, device)\nProcesses completed rollouts to generate a training data batch.\n\nThis function reconstructs the logic from the original AgentModeDaemon,\nusing data retrieved from the new server architecture. It handles padding,\ntruncation, and tensor creation for the PPO training loop.",
    "source": "codebase:daemon.py",
    "timestamp": "2025-09-02T13:11:41.748993",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/verl/daemon.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_51e35f35_20250902131141",
    "category": "api_references",
    "content": "def clear_data_and_server(self)\nResets the internal state of the daemon for the next run.",
    "source": "codebase:daemon.py",
    "timestamp": "2025-09-02T13:11:41.754857",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/verl/daemon.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  },
  {
    "id": "api_references_73994e48_20250902131141",
    "category": "api_references",
    "content": "def run_server()\nRun the AgentLightningServer in a separate thread.",
    "source": "codebase:daemon.py",
    "timestamp": "2025-09-02T13:11:41.760768",
    "metadata": {
      "type": "function",
      "file": "/Users/jankootstra/agent-lightning-main/agentlightning/verl/daemon.py"
    },
    "usage_count": 0,
    "relevance_score": 1.0
  }
]